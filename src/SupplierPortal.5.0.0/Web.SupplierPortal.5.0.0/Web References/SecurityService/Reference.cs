//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace com.Sconit.Web.SecurityService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecurityServiceSoap", Namespace="http://com.Sconit.WebService.SecurityService/")]
    public partial class SecurityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VerifyUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPermissionCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPermissionCodesByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPermissionCodesByTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyUserPasswordAndGetUserTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateUserTokenOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SecurityService() {
            this.Url = global::com.Sconit.Web.Properties.Settings.Default.com_Sconit_WebApp_SecurityService_SecurityService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event VerifyUserPasswordCompletedEventHandler VerifyUserPasswordCompleted;
        
        /// <remarks/>
        public event GetUserPermissionCodesCompletedEventHandler GetUserPermissionCodesCompleted;
        
        /// <remarks/>
        public event GetUserPermissionCodesByTypeCompletedEventHandler GetUserPermissionCodesByTypeCompleted;
        
        /// <remarks/>
        public event GetUserPermissionCodesByTypesCompletedEventHandler GetUserPermissionCodesByTypesCompleted;
        
        /// <remarks/>
        public event VerifyUserPasswordAndGetUserTokenCompletedEventHandler VerifyUserPasswordAndGetUserTokenCompleted;
        
        /// <remarks/>
        public event GenerateUserTokenCompletedEventHandler GenerateUserTokenCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/VerifyUserPassword", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyUserPassword(string userCode, string password) {
            object[] results = this.Invoke("VerifyUserPassword", new object[] {
                        userCode,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyUserPasswordAsync(string userCode, string password) {
            this.VerifyUserPasswordAsync(userCode, password, null);
        }
        
        /// <remarks/>
        public void VerifyUserPasswordAsync(string userCode, string password, object userState) {
            if ((this.VerifyUserPasswordOperationCompleted == null)) {
                this.VerifyUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyUserPasswordOperationCompleted);
            }
            this.InvokeAsync("VerifyUserPassword", new object[] {
                        userCode,
                        password}, this.VerifyUserPasswordOperationCompleted, userState);
        }
        
        private void OnVerifyUserPasswordOperationCompleted(object arg) {
            if ((this.VerifyUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyUserPasswordCompleted(this, new VerifyUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/GetUserPermissionCodes", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserPermissionCodes(string userCode) {
            object[] results = this.Invoke("GetUserPermissionCodes", new object[] {
                        userCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesAsync(string userCode) {
            this.GetUserPermissionCodesAsync(userCode, null);
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesAsync(string userCode, object userState) {
            if ((this.GetUserPermissionCodesOperationCompleted == null)) {
                this.GetUserPermissionCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionCodesOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissionCodes", new object[] {
                        userCode}, this.GetUserPermissionCodesOperationCompleted, userState);
        }
        
        private void OnGetUserPermissionCodesOperationCompleted(object arg) {
            if ((this.GetUserPermissionCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionCodesCompleted(this, new GetUserPermissionCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/GetUserPermissionCodesByType", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserPermissionCodesByType(string userCode, PermissionCategoryType permissionType) {
            object[] results = this.Invoke("GetUserPermissionCodesByType", new object[] {
                        userCode,
                        permissionType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesByTypeAsync(string userCode, PermissionCategoryType permissionType) {
            this.GetUserPermissionCodesByTypeAsync(userCode, permissionType, null);
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesByTypeAsync(string userCode, PermissionCategoryType permissionType, object userState) {
            if ((this.GetUserPermissionCodesByTypeOperationCompleted == null)) {
                this.GetUserPermissionCodesByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionCodesByTypeOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissionCodesByType", new object[] {
                        userCode,
                        permissionType}, this.GetUserPermissionCodesByTypeOperationCompleted, userState);
        }
        
        private void OnGetUserPermissionCodesByTypeOperationCompleted(object arg) {
            if ((this.GetUserPermissionCodesByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionCodesByTypeCompleted(this, new GetUserPermissionCodesByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/GetUserPermissionCodesByTypes", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserPermissionCodesByTypes(string userCode, PermissionCategoryType[] permissionType) {
            object[] results = this.Invoke("GetUserPermissionCodesByTypes", new object[] {
                        userCode,
                        permissionType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesByTypesAsync(string userCode, PermissionCategoryType[] permissionType) {
            this.GetUserPermissionCodesByTypesAsync(userCode, permissionType, null);
        }
        
        /// <remarks/>
        public void GetUserPermissionCodesByTypesAsync(string userCode, PermissionCategoryType[] permissionType, object userState) {
            if ((this.GetUserPermissionCodesByTypesOperationCompleted == null)) {
                this.GetUserPermissionCodesByTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionCodesByTypesOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissionCodesByTypes", new object[] {
                        userCode,
                        permissionType}, this.GetUserPermissionCodesByTypesOperationCompleted, userState);
        }
        
        private void OnGetUserPermissionCodesByTypesOperationCompleted(object arg) {
            if ((this.GetUserPermissionCodesByTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionCodesByTypesCompleted(this, new GetUserPermissionCodesByTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/VerifyUserPasswordAndGetUserToken", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyUserPasswordAndGetUserToken(string userCode, string password) {
            object[] results = this.Invoke("VerifyUserPasswordAndGetUserToken", new object[] {
                        userCode,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyUserPasswordAndGetUserTokenAsync(string userCode, string password) {
            this.VerifyUserPasswordAndGetUserTokenAsync(userCode, password, null);
        }
        
        /// <remarks/>
        public void VerifyUserPasswordAndGetUserTokenAsync(string userCode, string password, object userState) {
            if ((this.VerifyUserPasswordAndGetUserTokenOperationCompleted == null)) {
                this.VerifyUserPasswordAndGetUserTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyUserPasswordAndGetUserTokenOperationCompleted);
            }
            this.InvokeAsync("VerifyUserPasswordAndGetUserToken", new object[] {
                        userCode,
                        password}, this.VerifyUserPasswordAndGetUserTokenOperationCompleted, userState);
        }
        
        private void OnVerifyUserPasswordAndGetUserTokenOperationCompleted(object arg) {
            if ((this.VerifyUserPasswordAndGetUserTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyUserPasswordAndGetUserTokenCompleted(this, new VerifyUserPasswordAndGetUserTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.SecurityService/GenerateUserToken", RequestNamespace="http://com.Sconit.WebService.SecurityService/", ResponseNamespace="http://com.Sconit.WebService.SecurityService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateUserToken(string userCode) {
            object[] results = this.Invoke("GenerateUserToken", new object[] {
                        userCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateUserTokenAsync(string userCode) {
            this.GenerateUserTokenAsync(userCode, null);
        }
        
        /// <remarks/>
        public void GenerateUserTokenAsync(string userCode, object userState) {
            if ((this.GenerateUserTokenOperationCompleted == null)) {
                this.GenerateUserTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateUserTokenOperationCompleted);
            }
            this.InvokeAsync("GenerateUserToken", new object[] {
                        userCode}, this.GenerateUserTokenOperationCompleted, userState);
        }
        
        private void OnGenerateUserTokenOperationCompleted(object arg) {
            if ((this.GenerateUserTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateUserTokenCompleted(this, new GenerateUserTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.Sconit.WebService.SecurityService/")]
    public enum PermissionCategoryType {
        
        /// <remarks/>
        Url,
        
        /// <remarks/>
        Region,
        
        /// <remarks/>
        Customer,
        
        /// <remarks/>
        Supplier,
        
        /// <remarks/>
        Terminal,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void VerifyUserPasswordCompletedEventHandler(object sender, VerifyUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserPermissionCodesCompletedEventHandler(object sender, GetUserPermissionCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPermissionCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserPermissionCodesByTypeCompletedEventHandler(object sender, GetUserPermissionCodesByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionCodesByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPermissionCodesByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserPermissionCodesByTypesCompletedEventHandler(object sender, GetUserPermissionCodesByTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionCodesByTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPermissionCodesByTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void VerifyUserPasswordAndGetUserTokenCompletedEventHandler(object sender, VerifyUserPasswordAndGetUserTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyUserPasswordAndGetUserTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyUserPasswordAndGetUserTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GenerateUserTokenCompletedEventHandler(object sender, GenerateUserTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateUserTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateUserTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591