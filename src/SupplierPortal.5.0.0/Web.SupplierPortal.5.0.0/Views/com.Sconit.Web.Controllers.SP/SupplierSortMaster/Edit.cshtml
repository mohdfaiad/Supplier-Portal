@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.ORD.OrderMaster
 @{
     ViewBag.Title = "Index";
     Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_Sort_List_Query" });
}

<script type="text/javascript">
    function ShipFrom_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function ShipTo_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }

    function onShipClick() {
        var grid = $("#OrderDetail").data("tGrid");
        var rows = grid.$tbody.children("tr:not(.t-no-data)");
        var idStr = "";
        var qtyStr = "";
        var errorStr = "";
        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            var id = row.find("#Id").val();
            var qty = row.find("#CurrentShipQty").val();
            if (qty != "" && !isNaN(qty) && parseFloat(qty) > 0) {
                if (idStr == "") {
                    idStr = id;
                    qtyStr = qty;
                } else {
                    idStr += "," + id;
                    qtyStr += "," + qty;
                }
            }
        }
        if (errorStr != "") {
            $message.error(errorStr);
            return;
        }
        var data = {
            "idStr": idStr,
            "qtyStr": qtyStr
        }
        $.ajax({
            type: "post",
            dataType: "Html",
            data: data,
            url: "@Url.Content("~/SupplierOrder/SupplierShipOrder/")",
            cache: false,
            success: function (data, textStatus) {
                var $tGrid = $("#content");
                $($tGrid).html(data);

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.OrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Flow)
                @Html.HiddenFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @*@Html.LabelFor(model => model.TraceCode)*@
                <label>拨次</label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.TraceCode)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.FlowDescription)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.FlowDescription)
            </div>
           
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @{
           Html.RenderAction("_CodeMasterDropDownList", "Common",
               new
               {
                   code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
                   controlName = "Priority",
                   selectedValue = Model != null ? (int)Model.Priority : 0,
                   enable = false
               });
                }
            </div>
          
            
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.WindowTime)
            </div>
            <div class="editor-label-2">
                <label>
                    供应商
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.HiddenFor(model => model.PartyFrom)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_PartyToName
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyToName)
                @Html.HiddenFor(model => model.PartyTo)
            </div>
           
            <div class="editor-label-2">
                <label>
                供应商联系人
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromContact)
            </div>
            <div class="editor-label-2">
                <label>
                SIH联系人
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipToContact)
            </div>
            <div class="editor-label-2">
                <label>
              供应商联系电话
              </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromTel)
            </div>
            <div class="editor-label-2">
                <label>
                SIH联系电话
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipFromTel)
            </div>
            
           
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Dock)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Dock)
            </div>
            
          
           
          
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
           Html.RenderAction("_CodeMasterDropDownList", "Common",
               new
               {
                   code = com.Sconit.CodeMaster.CodeMaster.SupplierOrderStatus,
                   controlName = "Status",
                   selectedValue = Model != null ? (int)Model.Status : 0,
                   enable = false
               });
                }
                @Html.HiddenFor(model => model.Status)
            </div>
             
            <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateDate)
                </div>
        </div>
    </fieldset>
    <div class="editor-footer">
        @*@Html.Button(Resources.Global.Button_Ship, "Url_SequenceMaster_SupplierShip", new Dictionary<string, string>()
	    {
	        {"type", "button"},
	        {"id", "btnShip"},
            {"needconfirm","true"},
            {"onclick","onShipClick()"}
	    })*@
        <button type="button" id="btnPrint" onclick='PrintClick("@Url.Content("~/SupplierSortMaster/PrintOrders/")")'  >
                @Resources.Global.Button_Print</button>
            <button type="button" id="btnComposePrint" onclick='PrintClick("@Url.Content("~/SupplierSortMaster/composePrintOrders/")")'  >
                合并打印</button>
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/SupplierSortMaster/List")'">
            @Resources.Global.Button_Back</button>
    </div> 
}
@{
    Html.RenderAction("_OrderDetailList", "SupplierSortMaster", new { orderNo = Model.OrderNo });
}

<script type="text/javascript" language="javascript">
    function PrintClick(url) {
        var data = {
            "orderNos": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            data: data,
            async: false,
            url: url,
            cache: false,
            success: function (data, textStatus) {
                DisplayJsonMessages(data);
                if (data != "") {
                    var printUrl = data.split('||');
                    for (var i = 0; i < printUrl.length; i++) {
                        if (printUrl[i] != "") {
                            PrintOrder(printUrl[i]);
                        }
                    }
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function onShipClick() {
        var orderData = {
            "orderNo": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "html",
            url: "@Url.Content("~/SupplierSortMaster/ShipOrderByOrderNo/")",
            data: orderData,
            success: function (data, textStatus) {
                $("#content").html(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
    function onShip() {
        var checkedOrders = $("#CheckedOrders").val();
        var grid = $("#OrderDetail").data("tGrid");
        var rows = grid.$tbody.children("tr:not(.t-no-data)");
        var idStr = "";
        var qtyStr = "";

        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            var id = row.find("#Id").val();

            var qty = row.find("#CurrentShipQty").val();
            if (qty != "" && !isNaN(qty) && parseFloat(qty) > 0) {
                if (idStr == "") {
                    idStr = id;
                    qtyStr = qty;
                } else {
                    idStr += "," + id;
                    qtyStr += "," + qty;
                }
            }
        }
        var data = {
            "idStr": idStr,
            "qtyStr": qtyStr
        }
        $.ajax({
            type: "post",
            dataType: "Json",
            data: data,
            url: "@Url.Content("~/SequenceMaster/ShipOrder/")",
            cache: false,
            success: function (data, textStatus) {
                DisplayJsonMessages(data);
                if (data != "") {
                    $.ajax({
                        type: "get",
                        dataType: "html",
                        data: { orderNo: $("#OrderNo").val() },
                        url: "@Url.Content("~/SequenceMaster/Edit/")",
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
