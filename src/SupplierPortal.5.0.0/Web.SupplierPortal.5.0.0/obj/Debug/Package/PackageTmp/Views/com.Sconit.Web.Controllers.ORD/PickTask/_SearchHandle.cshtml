@using com.Sconit.Entity.ORD
@using com.Sconit.Entity.SYS
@using com.Sconit.Web.Models.SearchModels.ORD
<fieldset>
    @using (Html.BeginForm("ListHandle", "PickTask"))
    {   
        <div class="search">
            <div class="search-label">
                <label for="PickTask_PartyFrom">
                    @Resources.ORD.PickTask.PickTask_LocationFrom
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_LocationComboBox", "Common", new
        {
            controlName = "LocationFrom",
            selectedValue = TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).LocationFrom : null
        });
                }
            </div>
            <div class="search-label">
                <label for="PickTask_Picker">
                    @Resources.ORD.PickTask.PickTask_Picker
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_PickerComboBox", "Common", new
            {
                controlName = "Picker",
                checkLocation = false,
                selectedValue = TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).Picker : string.Empty
            });
                }
            </div>
            <div class="search-label">
                <label for="PickTask_OrderNo">
                    @Resources.ORD.PickTask.PickTask_OrderNo
                </label>
            </div>
            <div class="search-field">
                @Html.TextBox("OrderNo", TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).OrderNo : string.Empty) 
            </div>
            <div class="search-label">
                <label for="Picker_Code">
                    @Resources.ORD.PickTask.PickTask_Item
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_ItemComboBox", "Common", new
        {
            controlName = "Item",
            selectedValue = TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).Item : string.Empty
        });
                }
            </div>
            <div class="search-label">
                <label for="PickTask_Flow">
                    @Resources.ORD.PickTask.PickTask_Flow
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common",
    new
    {
        controlName = "Flow",
        type = (int)com.Sconit.CodeMaster.OrderType.Distribution,
        selectedValue = TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).Flow : string.Empty
    });
                }
            </div>
            <div class="search-label">
                <label for="PickTask_ShowHold">
                   @Resources.ORD.PickTask.PickTask_ShowHold
                </label>
            </div>
            <div class="search-field">
                @Html.CheckBox("ShowHold", TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).ShowHold : false)
            </div>
            <div class="search-label">
                <label for="PickTask_ReleaseStart">
                   @Resources.ORD.PickTask.PickTask_ReleaseStart
                </label>
            </div>
            <div class="search-field">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("ReleaseStart")
            .Value(TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).ReleaseStart : System.DateTime.Today)
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>

             <div class="search-label">
                <label for="PickTask_ReleaseEnd">
                   @Resources.ORD.PickTask.PickTask_ReleaseEnd
                </label>
            </div>
            <div class="search-field">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("ReleaseEnd")
            .Value(TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).ReleaseEnd : System.DateTime.Today.AddDays(1))
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
            <div class="search-label">
                <label for="PickTask_WindowStart">
                   @Resources.ORD.PickTask.PickTask_WindowStart
                </label>
            </div>
            <div class="search-field">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("WindowStart")
            .Value(TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).WindowStart : System.DateTime.Today)
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>

             <div class="search-label">
                <label for="PickTask_WindowEnd">
                   @Resources.ORD.PickTask.PickTask_WindowEnd
                </label>
            </div>
            <div class="search-field">
            @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("WindowEnd")
            .Value(TempData["PickTaskSearchModel"] != null ? ((PickTaskSearchModel)TempData["PickTaskSearchModel"]).WindowEnd : System.DateTime.Today.AddDays(1))
            .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
        </div>
        <div class="search-footer">
         @Html.Hidden("isFromList", true)
            <button type="submit" id="btnSearch">
                @Resources.Global.Button_Search</button>
        @{
        if (TempData["PickTaskSearchModel"] != null)
        {
            if (!((PickTaskSearchModel)TempData["PickTaskSearchModel"]).ShowHold)
            {
            @Html.Button(Resources.ORD.PickTask.PickTask_ButtonAssign, "Url_PickTask_Assign", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnAssign"},
                {"needconfirm","true"},
                {"onclick","javascript:ajaxAssign()"}
	        })
            @Html.Button(Resources.ORD.PickTask.PickTask_ButtonPrint, "Url_PickTask_Print", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnPrint"},
                {"needconfirm","true"},
                {"onclick","javascript:ajaxPrint()"}
	        })
            @Html.Button(Resources.ORD.PickTask.PickTask_ButtonHold, "Url_PickTask_Hold", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnHold"},
                {"needconfirm","true"},
                {"onclick","javascript:ajaxHold()"}
	        })
            }
            else
            {
            @Html.Button(Resources.ORD.PickTask.PickTask_ButtonUnhold, "Url_PickTask_Unhold", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnUnhold"},
                {"needconfirm","true"},
                {"onclick","javascript:ajaxUnhold()"}
	        })
            }
        }
        }
        </div>

    }

<script type="text/javascript">
    $(function () {
        $("#checkAll").click(function () {
            $('input[name="checkedRecords"]').attr("checked", this.checked);
        });
    });

        function showButtons() {
            var $checkRecords = $("input[name='checkedRecords']");
            var showButton = false;
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    showButton = true;
                    break;
                }
            }
            $("#checkAll").attr("checked", $checkRecords.length == $("input[name='checkedRecords']:checked").length ? true : false);
            //if (showButton) {
            //    $("#btnOrder").removeAttr("disabled");
            //} else {
            //    $("#btnOrder").attr("disabled", "disabled");
            //}
        }

        function ajaxAssign() {
            var $checkRecords = $("input[name='checkedRecords']");
            var idStr = "";
            var pickerStr = "";
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    var id = $checkRecords[i].value;
                    if (idStr == "") {
                        idStr = id;
                    } else {
                        idStr += "," + id;
                    }

                    var newPicker = $($checkRecords[i]).parent().next().next().next().next().next().next().next().next().next().next().next().next().next().text();
                    if (newPicker == "") {
                        newPicker = "n/a";
                    }
                    //alert($($checkRecords[i]).parent().next().next().next().next().next().next().next().next().next().next().next().text());
                    if (pickerStr == "") {
                        pickerStr = newPicker;
                    } else {
                        pickerStr += "," + newPicker;
                    }
                }
            }

            var data = {
                ChosenTasks: idStr,
                NewPickers: pickerStr
            };

            $.ajax({
                type: "post",
                dataType: "json",
                url: "@Url.Content("~/PickTask/AssignTask/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    DisplayJsonMessages(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }

        function ajaxHold() {
            var $checkRecords = $("input[name='checkedRecords']");
            var idStr = "";
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    var id = $checkRecords[i].value;
                    if (idStr == "") {
                        idStr = id;
                    } else {
                        idStr += "," + id;
                    }
                }
            }

            var data = {
                ChosenTasks: idStr
            };

            $.ajax({
                type: "post",
                dataType: "json",
                url: "@Url.Content("~/PickTask/HoldTask/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    DisplayJsonMessages(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }

        function ajaxUnhold() {
            var $checkRecords = $("input[name='checkedRecords']");
            var idStr = "";
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    var id = $checkRecords[i].value;
                    if (idStr == "") {
                        idStr = id;
                    } else {
                        idStr += "," + id;
                    }
                }
            }

            var data = {
                ChosenTasks: idStr
            };

            $.ajax({
                type: "post",
                dataType: "json",
                url: "@Url.Content("~/PickTask/UnholdTask/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    DisplayJsonMessages(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }

        function ajaxPrint() {
            var $checkRecords = $("input[name='checkedRecords']");
            var idStr = "";
            for (var i = 0; i < $checkRecords.length; i++) {
                if ($checkRecords[i].checked) {
                    var id = $checkRecords[i].value;
                    if (idStr == "") {
                        idStr = id;
                    } else {
                        idStr += "," + id;
                    }
                }
            }

            var data = {
                ChosenTasks: idStr
            };

            $.ajax({
                type: "post",
                dataType: "json",
                url: "@Url.Content("~/PickTask/PrintTask/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    DisplayJsonMessages(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }

        function onPickerDataBinding(e) {
            var item = $(e.target).parent().parent().next().text();
            var loc =  $(e.target).parent().parent().next().next().text();
            e.data = {
                "Item": item,
                "Location": loc
            };
        }
</script>
</fieldset>
