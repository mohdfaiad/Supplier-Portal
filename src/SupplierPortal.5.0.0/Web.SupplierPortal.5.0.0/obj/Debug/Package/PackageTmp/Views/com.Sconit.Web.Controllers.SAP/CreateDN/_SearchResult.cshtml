@using com.Sconit.Entity.SAP.TRANS;
@model IEnumerable<com.Sconit.Entity.SAP.ORD.CreateDN>
  <script type="text/javascript">
      $(function () {
          $("#checkAll").click(function () {
              $('input[name="checkedRecords"]').attr("checked", this.checked);
              $("#btnReCreateDN").attr("style", this.checked ? "display:inline" : "display:none");
              $("#btnReCancelCreateDN").attr("style", this.checked ? "display:inline" : "display:none");
          });
      });

      function showButtons() {
          var $checkRecords = $("input[name='checkedRecords']");
          var showButton = false;
          for (var i = 0; i < $checkRecords.length; i++) {
              if ($checkRecords[i].checked) {
                  showButton = true;
                  break;
              }
          }
          $("#checkAll").attr("checked", $checkRecords.length == $("input[name='checkedRecords']:checked").length ? true : false);
          $("#btnReCreateDN").attr("style", showButton ? "display:inline" : "display:none");
          $("#btnReCancelCreateDN").attr("style", showButton ? "display:inline" : "display:none");
      }
</script>

<fieldset>
    @(Html.Telerik().Grid(Model)
                                .Name("CreateDNGrid")
        .DataKeys(keys =>
        {
            keys.Add(p => p.IpDetConfirmId);
        })
        .Columns(columns =>
        {
            columns.Bound(o => o.IpDetConfirmId)
                .ClientTemplate("<input type='checkbox' id='checkedRecords' name='checkedRecords' value='<#=IpDetConfirmId #>,<#=CancelIpDetConfirmId #>'   onClick='showButtons()' />")
                .HeaderTemplate("<input type='checkbox' id='checkAll' name='checkAll' />")
                .Width(36).HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.IpDetConfirmId).Title("确认Id");
            columns.Bound(o => o.IpNo);
            columns.Bound(o => o.MATNR);
            columns.Bound(o => o.ItemDesc);
            columns.Bound(o => o.G_LFIMG);
            columns.Bound(o => o.WERKS);
            columns.Bound(o => o.LGORT);
            columns.Bound(o => o.EBELN);
            columns.Bound(o => o.EBELP);
            columns.Bound(o => o.EffDate);
            columns.Bound(o => o.CreateDate);
            columns.Bound(o => o.LastModifyDate);
            
            columns.Bound(o => o.VBELN_VL);
            columns.Bound(o => o.ErrorCount);
            columns.Bound(o => o.Message);
            columns.Bound(o => o.DNSTRDesc);
            columns.Bound(o => o.GISTRDesc);

            columns.Bound(o => o.CancelIpDetConfirmId).Title("取消Id");
            columns.Bound(o => o.CancelDNSTRDesc);
            columns.Bound(o => o.CancelGISTRDesc);
            columns.Bound(o => o.CancelErrorCount);
            columns.Bound(o => o.CancelMessage);
            columns.Bound(o => o.CancelCreateDate);
        })
        .Scrollable(c => c.Enabled(false))
        .EnableCustomBinding(true)
        .DataBinding(dataBinding => dataBinding.Ajax().Select("_AjaxList", "CreateDN"))
        .ClientEvents(events => events.OnDataBinding("CreateDNGrid_OnDataBinding").OnComplete("TelerikGridView_OnComplete"))
        .Pageable(settings =>
        {
            settings.Total(ViewBag.Total == null ? 0 : ViewBag.Total);
            settings.PageSize(ViewBag.PageSize);
        })
        .Sortable()
        .Resizable(resizing => resizing.Columns(true))
    )
    <script type="text/javascript">
        function CreateDNGrid_OnDataBinding(e) {
            i = 0;
            e.data = {
                IpNo: $('#IpNo').val(),
                MATNR: $('#MATNR').val(),
                EBELN: $('#EBELN').val(),
                EBELP: $('#EBELP').val(),
                LGORT: $('#LGORT').val(),
                VBELN_VL: $('#VBELN_VL').val(),
                DNSTR: $('#DNSTR').val(),
                GISTR: $('#GISTR').val(),
                CreateDateFrom: $('#CreateDateFrom').val(),
                CreateDateTo: $('#CreateDateTo').val()
            };
        }

        var i = 0;
        function CreateScheduleLineGrid_OnRowDataBound(e) {
            if (i != 0) {
                return;
            }
            var rows = $("tbody").children("tr:not(.t-no-data)");
            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                var row = $(rows[rowIndex]);
                var status = row.children().eq(11).text();
                var errorCount = row.children().eq(14).text();
                if (status != "2" || errorCount != "10") {
                    row.children().eq(15).children().hide();
                }
            }
            i = rows.length;
        }

        function ReSendClick(e) {
            var data = {
                Id: $(e).parent().parent().children().eq(0).text()
            }
            $.ajax({
                type: "post",
                dataType: "html",
                url: "@Url.Content("~/CreateScheduleLine/ReSend/")",
                data: data,
                success: function (data, ordermstr) {
                    //                    DisplayJsonMessages(data);
                    //                    $("#ErrorBarCodeListDiv").html(data);
                    $("#count").html(data);
                }
            });
        }
    </script>
</fieldset>
