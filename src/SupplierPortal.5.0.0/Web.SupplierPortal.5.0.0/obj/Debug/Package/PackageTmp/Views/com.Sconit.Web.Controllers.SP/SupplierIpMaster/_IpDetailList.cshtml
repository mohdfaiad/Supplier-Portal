@model IEnumerable<com.Sconit.Entity.ORD.IpDetail>
           
<fieldset>
<script type="text/javascript">
    function IpDetailGrid_OnDataBinding(e) {
        e.data = {
        };
    } 
    </script>
    <legend>@Resources.ORD.IpDetail.IpDetail_Title</legend>
    @(Html.Telerik().Grid(Model)
        .Name("IpDetail")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .Columns(columns =>
        {
            columns.Bound(o => o.Sequence);
            columns.Bound(o => o.IpNo).Width(100);
            columns.Bound(o => o.OrderNo).Width(100);
            columns.Bound(o => o.ExternalOrderNo).Width(100);
            columns.Bound(o => o.ExternalSequence).Width(100);
            columns.Bound(o => o.Flow).Title(Resources.ORD.IpMaster.IpMaster_Flow);
            columns.Bound(o => o.LocationTo);
            columns.Bound(o => o.SAPLocationTo).Title("SAP库位");
            columns.Bound(o => o.Item).Width(100);
            columns.Bound(o => o.ReferenceItemCode);
            columns.Bound(o => o.ItemDescription);
            columns.Bound(o => o.Qty).Width(100);
            columns.Bound(o => o.ReceivedQty).Width(100);
            columns.Bound(o => o.IsClose).ClientTemplate("<input type='checkbox' disabled='disabled' name='IsClose' <#= IsClose? checked='checked' : '' #> />");
            columns.Bound(o => o.Uom);
            columns.Bound(o => o.ManufactureParty);
            columns.Bound(o => o.IsInspect).ClientTemplate("<input type='checkbox' disabled='disabled' name='IsInspect' <#= IsInspect? '' : checked='checked' #> />").Title("是否免检");
            columns.Bound(o => o.UnitCountDescription);
            columns.Bound(o => o.Container).ReadOnly();
            columns.Bound(o => o.ContainerDescription);
            //columns.Bound(o => o.IpNo);
            //columns.Bound(o => o.OrderNo);
            //columns.Bound(o => o.Flow).Title(Resources.ORD.IpMaster.IpMaster_Flow);
            //columns.Bound(o => o.Item);
            //columns.Bound(o => o.ReferenceItemCode);
            //columns.Bound(o => o.ItemDescription);
            //columns.Bound(o => o.Uom);
            //columns.Bound(o => o.UnitCount).Format("{0:N}");
            //columns.Bound(o => o.Container).Format("{0:N}");
            //columns.Bound(o => o.ContainerDescription).Format("{0:N}");
            //columns.Bound(o => o.LocationToName);
            //columns.Bound(o => o.Type)
            //    .ClientTemplate(string.Format("<input type='checkbox' disabled='disabled' name='Type' <#= Type==(" + (int)com.Sconit.CodeMaster.IpDetailType.Gap + ")? checked='checked' : '' #> />"));
            //columns.Bound(o => o.TypeDescription);
            //columns.Bound(o => o.Qty).Format("{0:N}");
            //columns.Bound(o => o.ReceivedQty).Format("{0:N}");
            //columns.Bound(o => o.IsClose).ClientTemplate("<input type='checkbox' disabled='disabled' name='IsClose' <#= IsClose? checked='checked' : '' #> />");
        })

                         .DataBinding(dataBinding => dataBinding.Ajax().Select("_AjaxIpDetailList", "SupplierIpMaster"))
                                .ClientEvents(events => events.OnDataBinding("IpDetailGrid_OnDataBinding"))
                        .Pageable(settings =>
                        {
                            settings.Total(ViewBag.Total != null ? ViewBag.Total : 0);
                            settings.PageSize(50);
                        })
        .Sortable(c=>c.Enabled(false))
                .Resizable(resizing => resizing.Columns(true))
   
    )

     
</fieldset>
