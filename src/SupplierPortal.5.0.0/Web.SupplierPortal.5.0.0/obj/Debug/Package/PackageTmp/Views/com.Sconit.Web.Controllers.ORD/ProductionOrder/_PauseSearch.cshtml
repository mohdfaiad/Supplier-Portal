@using com.Sconit.Entity.ACC
@using com.Sconit.Web.Models.SearchModels.ORD
@using com.Sconit.Entity.SYS
@using com.Sconit.Entity.ORD
<fieldset>
    @using (Html.BeginForm("PauseList", "ProductionOrder"))
    {   
        <div class="search">
            <div class="search-label">
                <label for="OrderMaster_OrderNo">
                    @Resources.ORD.OrderMaster.OrderMaster_OrderNo
                </label>
            </div>
            <div class="search-field">
                @Html.TextBox("OrderNo", TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).OrderNo : string.Empty)
            </div>
            <div class="search-label">
                <label for="OrderMaster_TraceCode">
                    @Resources.ORD.OrderMaster.OrderMaster_TraceCode
                </label>
            </div>
            <div class="search-field">
                @Html.TextBox("TraceCode", TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).TraceCode : string.Empty)
            </div>
            <div class="search-label">
                <label for="OrderMaster_Flow">
                    @Resources.ORD.OrderMaster.OrderMaster_Flow_Production
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common",
            new
            {
                controlName = "Flow",
                type = (int)com.Sconit.CodeMaster.OrderType.Production,
                isVanOrder = true,
                selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Flow : string.Empty
            });
                }
            </div>
            @* <div class="search-label">
                <label for="OrderMaster_DateFrom">
                    @Resources.ORD.OrderMaster.OrderMaster_DateFrom
                </label>
            </div>
            <div class="search-field">
                @(Html.Telerik().DatePicker().Name("DateFrom")
            .Value(TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).DateFrom : System.DateTime.Today)
                .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
            <div class="search-label">
                <label for="OrderMaster_DateTo">
                    @Resources.ORD.OrderMaster.OrderMaster_DateTo
                </label>
            </div>
            <div class="search-field">
                @(Html.Telerik().DatePicker().Name("DateTo")
            .Value(TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).DateTo : System.DateTime.Today.AddDays(1))
                .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
            <div class="search-label">
                <label for="OrderMaster_CreateUserName">
                    @Resources.ORD.OrderMaster.OrderMaster_IsPause
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_CodeMasterDropDownList", "Common", new
        {
            code = com.Sconit.CodeMaster.CodeMaster.PauseStatus,
            controlName = "IsPause",
            includeBlankOption = true,
            blankOptionDescription = CodeDetail.SpecialValueEnum.BlankValue,
            blankOptionValue = "",
            selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).IsPause : null
        });
                }
            </div>*@
        </div>
        <div class="search-footer">
            @Html.Hidden("isFromList", true)
            <button type="submit" id="btnSearch">
                @Resources.Global.Button_Search</button>
            <button type="button" id="btnPrint" onclick="batchPause()" style="display:none" >
               批量暂停</button>
        </div>

    }
</fieldset>
 @{ Html.Telerik().Window()
        .Name("BatchPauseOrder")
        .Title("暂停工序")
        .Draggable(true)
        .Scrollable(true)
        .Resizable()
        .Height(100)
        .Width(300)
        .Modal(true)
       .Content(@<text>
        <div class="search" id="Operations">
            <div class="search-label">
                <label for="OrderMaster_Operation">
                    @Resources.ORD.OrderMaster.OrderMaster_Operation
                </label>
            </div>
            <div class="search-field">
                @Html.TextBox("PauseOp")
            </div>
            <div class="search-label">
            </div>
            <div class="search-field">
            </div>
            <div class="search-label">
            </div>
            <div class="search-field">
            </div>
            <div>
                <input id="PauseOrderNos" type="hidden"  />
                <button type="button" id="btnPause" onclick="PopPauseClick();">
                    @Resources.Global.Button_Pause</button>
            </div>
        </div>
        </text>)
        .Visible(false)
        .Render();
    }
<script type="text/javascript">
    function batchPause() {
        var $checkRecords = $("input[name='checkedRecords']");
        var checkedOrderNos = "";
        for (var i = 0; i < $checkRecords.length; i++) {
            if ($checkRecords[i].checked) {
                if (checkedOrderNos == "") {
                    checkedOrderNos = "'"+$checkRecords[i].value+"'";
                } else {
                    checkedOrderNos += "," + "'" + $checkRecords[i].value + "'";
                }
            }
        }

        if (checkedOrderNos == "") {
            alert('Must Check One');
            return;
        }

        var data = {
            "orderNos": checkedOrderNos
        };
        $.ajax({
            type: "post",
            dataType: "json",
            data: data,
            async: false,
            url: "@Url.Content("~/ProductionOrder/CheckOrderStatus/")",
            cache: false,
            success: function (data) {
            $("#PauseOrderNos").val(checkedOrderNos);
            if (data.exists) {
                var detailWindow = $("#BatchPauseOrder").data("tWindow");
                    detailWindow.center().open();
                } else {
                    BatchPopPause();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function PopPauseClick(e) {
       
        if ($("#PauseOp").val() == "" || $("#PauseOp").val() == undefined || $("#PauseOp").val() == null) {
            $message.error("暂停工位为必填。");
            return;
        }
        BatchPopPause();
    }
    function BatchPopPause() {
        var data = {
            "orderNos": $("#PauseOrderNos").val(),
            "pauseOp": $("#PauseOp").val()
        };
       
        $.ajax({
            type: "post",
            dataType: "json",
            url: "@Url.Content("~/ProductionOrder/BatchPauseProductOrder/")",
            data: data,
            cache: false,
            success: function (data) {
                DisplayJsonMessages(data);
                var detailWindow = $("#BatchPauseOrder").data("tWindow");
                detailWindow.center().close();
                ReturnView();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
