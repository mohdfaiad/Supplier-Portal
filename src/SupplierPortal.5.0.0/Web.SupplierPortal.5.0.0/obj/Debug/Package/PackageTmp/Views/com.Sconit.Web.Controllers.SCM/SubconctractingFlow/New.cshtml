@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.SCM.FlowMaster
@{
    ViewBag.Title = Resources.SCM.FlowMaster.FlowMaster_Subconctracting;
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_SubconctractingFlow_View" });
}
<script type="text/javascript">
    function PartyTo_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        }

        $('#LocationFrom').data('tComboBox').value('');
        $('#LocationFrom').data('tComboBox').text('');
        $("#LocationFrom").data("tComboBox").reload();

        $('#LocationTo').data('tComboBox').value('');
        $('#LocationTo').data('tComboBox').text('');
        $("#LocationTo").data("tComboBox").reload();

        $('#ShipTo').data('tComboBox').value('');
        $('#ShipTo').data('tComboBox').text('');
        $("#ShipTo").data("tComboBox").reload();
    }
   
    function LocationTo_DataBinding(e) {
        e.data = {
            region: $("#PartyTo").val()
        };
    }
  
    function ShipTo_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }

    function Supplier_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            combobox.reload();
        }
     

        $('#ShipFrom').data('tComboBox').value('');
        $('#ShipFrom').data('tComboBox').text('');
        $("#ShipFrom").data("tComboBox").reload();

        $('#BillAddress').data('tComboBox').value('');
        $('#BillAddress').data('tComboBox').text('');
        $("#BillAddress").data("tComboBox").reload();

        $('#PriceList').data('tComboBox').value('');
        $('#PriceList').data('tComboBox').text('');
        $("#PriceList").data("tComboBox").reload();
    }

    function LocationFrom_DataBinding(e) {
        e.data = {
            region: $("#PartyTo").val()
        };
    }

    function ShipFrom_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function BillAddress_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function PriceList_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Code)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Code)
                @Html.ValidationMessageFor(model => model.Code)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsActive", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingReferenceFlow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common",
    new
    {
        controlName = "ReferenceFlow",
         type= (int)com.Sconit.CodeMaster.OrderType.Production,
        selectedValue = Model != null ? Model.ReferenceFlow : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_SupplierComboBox", "Common",
    new
    {
        controlName = "PartyFrom",
        isChange = true,
        selectedValue = Model != null ? Model.PartyFrom : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_RegionComboBox", "Common",
    new
    {
        controlName = "PartyTo",
        isChange = true,
        selectedValue = Model != null ? Model.PartyTo : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingLocationFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
        new
        {
            controlName = "LocationFrom",
            checkRegion = true,
            selectedValue = Model != null ? Model.LocationFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingLocationTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
    new
    {
        controlName = "LocationTo",
        checkRegion = true,
        selectedValue = Model != null ? Model.LocationTo : string.Empty
    });
                }
            </div>
            <div class="editor-label-1">
                <label>@Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceFormat</label>
            </div>
            <div class="editor-field-1">
                @Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceToolTips
            </div>
            <div class="editor-label-1">
                @Html.LabelFor(model => model.ExtraDemandSource)
            </div>
            <div class="editor-field-1">
                @Html.TextBoxFor(model => model.ExtraDemandSource)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipFrom",
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model != null ? Model.ShipFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "ShipTo",
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.ShipAddress,
            selectedValue = Model != null ? Model.ShipTo : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BillAddress)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_AddressComboBox", "Common",
        new
        {
            controlName = "BillAddress",
            checkParty = true,
            type = (int)com.Sconit.CodeMaster.AddressType.BillAddress,
            selectedValue = Model != null ? Model.BillAddress : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PriceList)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_PriceListComboBox", "Common",
    new
    {
        controlName = "PriceList",
        checkParty = true,
        selectedValue = Model != null ? Model.PriceList : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.BillTerm)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderBillTerm,
            controlName = "BillTerm",
            isConsignment = false,
            isShowNA = false,
            selectedValue = (int)com.Sconit.CodeMaster.OrderBillTerm.ReceivingSettlement,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Dock)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Dock)
                @Html.ValidationMessageFor(model => model.Dock)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.MaxOrderCount)
            </div>
            <div class="editor-field-2">
                @Html.Telerik().NumericTextBoxFor(model => model.MaxOrderCount).DecimalDigits(0).MinValue(0)
                @Html.ValidationMessageFor(model => model.MaxOrderCount)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBarCode</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateHuOption)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.CreateHuOption,
            controlName = "CreateHuOption",
            selectedValue = Model != null ? (int)Model.CreateHuOption : 0
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.HuTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
            controlName = "HuTemplate",
            selectedValue = Model != null ? Model.HuTemplate : string.Empty
        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendPrint</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsPrintOrder)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintOrder", false)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingOrderTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate,
            controlName = "OrderTemplate",
            selectedValue = Model != null ? Model.OrderTemplate : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintRceipt)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintRceipt", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate,
            controlName = "ReceiptTemplate",
            selectedValue = Model != null ? Model.ReceiptTemplate : string.Empty
        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_SubconctractingLegendOrderControl</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsOrderFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsOrderFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsListDet)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsListDet", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsManualCreateDetail)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsManualCreateDetail", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveExceed)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveExceed", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyFromAuthority)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCheckPartyFromAuthority", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyToAuthority)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCheckPartyToAuthority", true)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendAutomatic</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoCreate)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoCreate", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoRelease)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoRelease", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsAutoStart)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoStart", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoReceive", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsInspect)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsInspect", false)
            </div>
        </div>
    </fieldset>

    <div class="editor-footer">
       @* <button type="submit" id="btnNew">
            @Resources.Global.Button_New</button>*@
     @Html.Button(Resources.Global.Button_New, "Url_SubconctractingFlow_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnNew"},
        {"needconfirm","true"}
	})
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/SubconctractingFlow/List")'">
            @Resources.Global.Button_Back</button>
    </div>
}