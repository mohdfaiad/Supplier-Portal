@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.INP.InspectMaster
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.INP.InspectMaster.InspectMaster_Title_View</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.InspectNo)
                @Html.HiddenFor(model => model.InspectNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.InspectNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                 @{
                    Html.RenderAction("_CodeMasterDropDownList", "Common", new
                    {
                        code = com.Sconit.CodeMaster.CodeMaster.InspectStatus,
                        controlName = "Status",
                        blankOptionDescription = CodeDetail.SpecialValueEnum.BlankValue,
                        blankOptionValue = "",
                        enable=false,
                        selectedValue = Model != null ? ((int)Model.Status).ToString():null
                    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateUserName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateUserName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateDate)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CreateDate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrint)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsPrint)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsATP)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IsATP)
            </div>
             <div class="editor-label-2">
                @Html.LabelFor(model => model.IpNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.IpNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ReceiptNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WMSNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.WMSNo)
            </div>
        </div>
        <div class="editor-footer">
            @*<button type="button" id="btnPrint" onclick="Print()">@Resources.Global.Button_Print</button>*@
            <button type="button" id="btnExport" onclick="Export()">@Resources.Global.Button_Export</button>
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/InspectionOrder/List")'">
                @Resources.Global.Button_Back</button>
        </div>
    </fieldset>
}
@{
    Html.RenderAction("InspectionOrderDetailEdit", "InspectionOrder", new { inspectNo = Model.InspectNo });
}
@*<form id="hiddenForm" action="/InspectionOrder/SaveToClient" target="_blank"
method="post">
<input id="inspectNo" name="inspectNo" type="hidden" />
</form>*@
<script type="text/javascript">
//    function Export(e) {
//        window.open("/InspectionOrder/SaveToClient/?inspectNo=" + $("#InspectNo").val());
//    }
    function Export() {
        var data = {
            "InspectNos": $("#InspectNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            data: data,
            async: false,
            url:"@Url.Content("~/InspectionOrder/Prints/")",
            cache: false,
            success: function (data, textStatus) {
                DisplayJsonMessages(data);
                if (data != "") {
                    var printUrl = data.split('||');
                    for (var i = 0; i < printUrl.length; i++) {
                        if (printUrl[i] != "") {
                            var url = printUrl[i].replace("//", "/");
                            url = url.replace("//", "/");
                            url = url.replace(":/", "://");
                            window.open(url, i + 1 + "", 'height=400,width=300,scrollbars=yes,status=yes')
                        }
                    }
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function Print(e) {
        var data = {
            "inspectNo": $("#InspectNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "@Url.Content("~/InspectionOrder/Print/")",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
