@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Distribution_ReturnNew" });
}
<script type="text/javascript">
    function Flow_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            $("#fdOrderDetail").hide();
        } else {
            var data = {
                "flow": e.value,
                "orderSubType": $("#ReturnOrderSubType").val()
            };
            $.ajax({
                type: "get",
                dataType: "html",
                url: "@Url.Content("~/DistributionOrder/_OrderDetailList/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    $("#fdOrderDetail").html(data);
                    $("#fdOrderDetail").show();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(errorThrown);
                }
            });
        }
    }

    function onReturnCreate() {
        var combobox = $("#Flow").data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            $("#fdOrderDetail").hide();
            alert("@Resources.ORD.OrderMaster.Errors_FlowIsNotCorrect");
        } else {
            var grid = $("#OrderDetail").data("tGrid");
            var inserted = grid.changeLog.inserted;
            var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
            var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

            var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
            var ordermstr = {
                "Flow": $("#Flow").val(),
                "EffectiveDate": $("#EffectiveDate").val(),
                "ReferenceOrderNo": $("#ReferenceOrderNo").val(),
                "ExternalOrderNo": $("ExternalOrderNo").val(),
                "WindowTime": $("#WindowTime").val(),
                "StartTime": $("#StartTime").val(),
                "SubType": "1",
                "IsQuick": false
            }

            grid._convert(oderDetails);
            $.ajax({
                type: "post",
                dataType: "json",
                url: "@Url.Content("~/DistributionOrder/CreateOrder/")",
                data: $.extend(oderDetails, ordermstr),
                success: function (data, ordermstr) {
                    DisplayJsonMessages(data);
                    if (data != "") {
                        var orderData = {
                            "orderNo": data.Data.OrderNo
                        };
                        $.ajax({
                            type: "post",
                            dataType: "html",
                            url: "@Url.Content("~/DistributionOrder/Edit/")",
                            data: orderData,
                            cache: false,
                            success: function (data, textStatus) {
                                var $tGrid = $("#content");
                                $($tGrid).html(data);
                            }
                        });
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common", new { controlName = "Flow", type = (int)com.Sconit.CodeMaster.OrderType.Distribution, isChange = true });
                }
                @Html.ValidationMessageFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                          .Name("EffectiveDate")
                          )
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("WindowTime"))
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm").Name("StartTime"))
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ExternalOrderNo)
            </div>
        </div>
        <div class="editor-footer">
            @Html.Button(Resources.Global.Button_New, "Url_OrderMstr_Distribution_ReturnNew", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onReturnCreate()"}
	        })
        </div>
        @Html.Hidden("ReturnOrderSubType", (int)com.Sconit.CodeMaster.OrderSubType.Return)
    </fieldset>
   
    <div id="fdOrderDetail" style="display: none;">
    </div>
   
}
