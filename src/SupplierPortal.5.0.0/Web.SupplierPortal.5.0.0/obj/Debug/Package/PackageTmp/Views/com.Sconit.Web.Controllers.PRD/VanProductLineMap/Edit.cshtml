@model com.Sconit.Entity.CUST.ProductLineMap
@{
    ViewBag.Title = "Index";
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_CUST_VanProductLineMap_View" });
}
<fieldset>
    <legend>@Resources.CUST.DefectCode.DefectCode_BaseInfo</legend>
    @using (Html.BeginForm())
    {   
        <div class="search">
            <div class="search-label">
                @Html.LabelFor(model => model.SAPProductLine)
            </div>
            <div class="search-field">
                @Html.DisplayFor(model => model.SAPProductLine)
                @Html.HiddenFor(model => model.SAPProductLine)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.TransmissionFlow)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "TransmissionFlow",
            flowStrategy = (int)com.Sconit.CodeMaster.FlowStrategy.SEQ,
            //prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Semi,
            type = (int)com.Sconit.CodeMaster.OrderType.Transfer,
            selectedValue = Model != null ? Model.TransmissionFlow : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.SaddleFlow)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "SaddleFlow",
            flowStrategy = (int)com.Sconit.CodeMaster.FlowStrategy.SEQ,
            //prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Semi,
            type = (int)com.Sconit.CodeMaster.OrderType.Transfer,
            selectedValue = Model != null ? Model.SaddleFlow : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.CabProdLine)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "CabProdLine",
            prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Cab,
            type = (int)com.Sconit.CodeMaster.OrderType.Production,
            selectedValue = Model != null ? Model.CabProdLine : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.ChassisProdLine)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "ChassisProdLine",
            prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Chassis,
            type = (int)com.Sconit.CodeMaster.OrderType.Production,
            selectedValue = Model != null ? Model.ChassisProdLine : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.AssemblyProdLine)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "AssemblyProdLine",
            prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Assembly,
            type = (int)com.Sconit.CodeMaster.OrderType.Production,
            selectedValue = Model != null ? Model.AssemblyProdLine : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.SpecialProdLine)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
                                                         {
                                                             controlName = "SpecialProdLine",
                                                             prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Special,
                                                             type = (int)com.Sconit.CodeMaster.OrderType.Production,
                                                             selectedValue = Model != null ? Model.SpecialProdLine : null
                                                         });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.CheckProdLine)
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common", new
        {
            controlName = "CheckProdLine",
            prodLineType = (int)com.Sconit.CodeMaster.ProdLineType.Check,
            type = (int)com.Sconit.CodeMaster.OrderType.Production,
            selectedValue = Model != null ? Model.CheckProdLine : null
        });
                }
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.MaxOrderCount)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.MaxOrderCount)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.InitialVanOrder)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.InitialVanOrder)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.EndVanOrder)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.EndVanOrder)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.Plant)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.Plant)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.ProdLineStartTime)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.ProdLineStartTime)
            </div>
            <div class="search-label">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="search-field">
                @Html.EditorFor(model => model.IsActive)
            </div>
        </div>
        <div class="search-footer">
            @Html.Hidden("isFromList", true)
            @Html.Button(Resources.Global.Button_Save, "Url_CUST_VanProductLineMap_Edit", new Dictionary<string, string>()
	        {
	            {"type", "submit"},
	            {"id", "btnSearch"},
                {"needconfirm","true"}
	        })
            @Html.Button(Resources.Global.Button_Delete, "Url_CUST_VanProductLineMap_Edit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btndelete"},
                {"needconfirm","true"},
                {"onclick","butDelete()"}
	        })
            <button type="button" id="btnReturn" onclick="location.href='@Url.Content("~/VanProductLineMap/List")'">
                @Resources.Global.Button_Back
            </button>
        </div>
       
    }
    <script type="text/javascript">
        function butDelete() {
            location.href = '@Url.Content("~/VanProductLineMap/ProductLineMapDeleteId/" + @Model.SAPProductLine)';
        }
 
    </script>
</fieldset>
