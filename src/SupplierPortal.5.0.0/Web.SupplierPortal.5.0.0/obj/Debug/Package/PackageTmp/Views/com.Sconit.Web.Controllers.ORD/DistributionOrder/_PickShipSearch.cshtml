@using com.Sconit.Entity.ACC
@using com.Sconit.Web.Models.SearchModels.ORD
@using com.Sconit.Entity.SYS
@using com.Sconit.Entity.ORD
<fieldset>
    @using (Html.BeginForm("PickShipList", "DistributionOrder"))
    {   
        <div class="search">
            <div class="search-label">
                <label for="OrderMaster_OrderNo">
                    @Resources.ORD.OrderMaster.OrderMaster_OrderNo
                </label>
            </div>
            <div class="search-field">
                @Html.TextBox("OrderNo", TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).OrderNo : string.Empty)
            </div>
            <div class="search-label">
                <label for="OrderMaster_Flow">
                    @Resources.ORD.OrderMaster.OrderMaster_Flow
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_FlowComboBox", "Common",
            new
            {
                controlName = "Flow",
                type = (int)com.Sconit.CodeMaster.OrderType.Distribution,
                selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Flow : string.Empty
            });
                }
            </div>
            <div class="search-label">
                <label for="OrderMaster_PartyFrom">
                    @Resources.ORD.OrderMaster.OrderMaster_PartyFrom
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_OrderMasterPartyFromComboBox", "Common",
            new
            {

                controlName = "PartyFrom",
                orderType = (int)com.Sconit.CodeMaster.OrderType.Procurement,
                selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).PartyFrom : string.Empty
            });
                }
            </div>
            <div class="search-label">
                <label for="OrderMaster_PartyTo">
                    @Resources.ORD.OrderMaster.OrderMaster_PartyTo
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_OrderMasterPartyToComboBox", "Common",
                        new
                        {
                            controlName = "PartyTo",
                            orderType = (int)com.Sconit.CodeMaster.OrderType.Procurement,
                            selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).PartyTo : string.Empty
                        });
                }
            </div>
            @*<div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_ReferenceOrderNo
                </label>
            </div>
            <div class="editor-field-2">
                @Html.TextBox("Picker", TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Picker : string.Empty)
            </div>*@
            <div class="editor-label-2">
                <label>@Resources.ORD.OrderMaster.OrderMaster_OrderStrategy</label>
            </div>
            <div class="editor-field-2">
                 @{
                Html.RenderAction("_CodeMasterDropDownList", "Common", new
                {
                    code = com.Sconit.CodeMaster.CodeMaster.FlowStrategy,
                    controlName = "OrderStrategy",
                    includeBlankOption = true,
                    selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).OrderStrategy : null
                });
                }
            </div>
            <div class="search-label">
                <label for="OrderMaster_Status">
                    @Resources.ORD.OrderMaster.OrderMaster_Status
                </label>
            </div>
            <div class="search-field">
                @{
                Html.RenderAction("_CodeMasterDropDownList", "Common", new
                {
                    code = com.Sconit.CodeMaster.CodeMaster.OrderStatus,
                    controlName = "Status",
                    includeBlankOption = true,
                    selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Status : null
                });
                }
            </div>
            <div class="search-label">
                <label for="OrderMaster_OrderNo">
                    @Resources.ORD.OrderMaster.OrderMaster_Item
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_ItemComboBox", "Common",
            new
            {
                controlName = "Item",
                selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Item : string.Empty
            });
                    
                }
            </div>
            <div class="search-label">
                <label for="PickRule_Picker">
                @Resources.MD.Picker.PickRule_Picker
                </label>
            </div>
            <div class="editor-field-2">
                @{
                Html.RenderAction("_PickerComboBox", "Common", new
                {
                    controlName = "Picker",
                    selectedValue = TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).Picker : string.Empty
                });
                }
            </div>
            <div class="search-label">
                <label for="OrderMaster_DateFrom">
                    @Resources.ORD.OrderMaster.OrderMaster_DateFrom
                </label>
            </div>
            <div class="search-field">
                @(Html.Telerik().DatePicker()
                .Format(com.Sconit.Entity.BusinessConstants.SHORT_DATE_FORMAT)
                .Name("DateFrom")
                .Value(TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).DateFrom : null)
                .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
            <div class="search-label">
                <label for="OrderMaster_DateTo">
                    @Resources.ORD.OrderMaster.OrderMaster_DateTo
                </label>
            </div>
            <div class="search-field">
                @(Html.Telerik().DatePicker()
                .Format(com.Sconit.Entity.BusinessConstants.SHORT_DATE_FORMAT)
                .Name("DateTo") .Value(TempData["OrderMasterSearchModel"] != null ? ((OrderMasterSearchModel)TempData["OrderMasterSearchModel"]).DateTo : null)
                .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
            </div>
            
            
        </div>
        <div class="search-footer">
            @Html.Hidden("isFromList", true)
            <button type="submit" id="btnSearch">
                @Resources.Global.Button_Search</button>
             @Html.Button(Resources.Global.Button_Pick, "Url_Distribution_PickShip", new Dictionary<string, string>()
	    {
	        {"type", "button"},
	        {"id", "btnShip"},
            {"needconfirm","true"},
            {"onclick","onPickShip()"}
	    })
        </div>

    }
</fieldset>
<form id="hiddenForm" action="/DistributionOrder/SaveOrderDetailViewToClient" target="_blank"
method="post">
</form>
<script type="text/javascript">
    function onPickShip() {
//        var checkedOrders = $("#CheckedOrders").val();
        var grid = $("#PickShipDetailGrid").data("tGrid");
        var rows = grid.$tbody.children("tr:not(.t-no-data)");
        var idStr = "";
        var qtyStr = "";
        var errorStr = "";
        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            var id = row.find("#Id").val();

            var orderNo = row.children().eq(1).text();
            var item = row.children().eq(3).text();
            var orderQty = row.children().eq(8).text();
            var pickQty = row.children().eq(9).text();
            var shipQty = row.children().eq(10).text();
            var qty = row.find("#CurrentShipQty").val();
            if (qty != "" && !isNaN(qty) && parseFloat(qty) > 0) {
                if (parseFloat(orderQty) - parseFloat(pickQty) - parseFloat(shipQty) < parseFloat(qty)) {
                    errorStr += "订单号"+orderNo+" 物料编号"+item+"的本次拣货数超过本次最大拣货数。";
                }
                if (idStr == "") {
                    idStr = id;
                    qtyStr = qty;
                } else {
                    idStr += "," + id;
                    qtyStr += "," + qty;
                }
            }
        }
        if (errorStr != "") {
            $message.error(errorStr);
            return;
        }
        var data = {
            "idStr": idStr,
            "qtyStr": qtyStr
        }
        $.ajax({
            type: "post",
            dataType: "Html",
            data: data,
            url: "@Url.Content("~/DistributionOrder/PickShipOrder/")",
            cache: false,
            success: function (data, textStatus) {
                //                DisplayJsonMessages(data);
                var $tGrid = $("#content");
                $($tGrid).html(data);
//                if (data != "") {
////                    $.ajax({
////                        type: "get",
////                        dataType: "html",
////                        data: { IpNo: data.Data.IpNo },
////                        url: "/DistributionIpMaster/Edit/",
////                        cache: false,
////                        success: function (data, textStatus) {
////                            var $tGrid = $("#content");
////                            $($tGrid).html(data);
////                        }
////                    });
//                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function FlowStrategy_Change()
    { }
</script>
