@model com.Sconit.Entity.ORD.OrderMaster
<script type="text/javascript">
    function ShipFrom_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }
    function ShipTo_DataBinding(e) {
        e.data = {
            party: $("#PartyTo").val()
        };
    }
    function LocationTo_DataBinding(e) {
        e.data = {
            region: $("#PartyTo").val()
        };
    }

    function LocationFrom_DataBinding(e) {
        e.data = {
            region: $("#PartyFrom").val()
        };
    }

    function BillAddress_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }

    function More(va) {
        if (va.innerHTML == "More...") {
            document.getElementById("divMore").style.display = 'inline'
            document.getElementById("more").innerHTML = "Hide...";
        }
        else {
            document.getElementById("divMore").style.display = 'none'
            document.getElementById("more").innerHTML = "More...";
        }
    }


    function PriceList_DataBinding(e) {
        e.data = {
            party: $("#PartyFrom").val()
        };
    }


    function PriceList_Change(e) {
        var data = { "value": e.value };
        $.ajax({
            type: "post",
            dataType: "Json",
            data: data,
            url: "@Url.Content("~/ProcurementOrder/_CurrencyValue/")",
            cache: false,
            success: function (data, textStatus) {
                if (data == "") {
                    alert("价格单不存在，请重新选择！");
                    $('#Currency').data('tDropDownList').value('');
                    $('#Currency').data('tDropDownList').text('');
                }
                $('#Currency').data('tDropDownList').value(data)
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(errorThrown);
            }
        });
    }



</script>
@using (Html.BeginForm("_Edit", "ProcurementOrder"))
{
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.BillAddress)
                @Html.HiddenFor(model => model.ShipFrom)
                @Html.HiddenFor(model => model.ShipTo)
                @Html.HiddenFor(model => model.PriceList)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsOpenOrder)
            </div>
            <div class="editor-field-2">
                @{
    if (ViewBag.isEditable)
    {
                    @Html.CheckBoxFor(model => model.IsOpenOrder)
    }
    else
    {
                    @Html.CheckBoxFor(model => model.IsOpenOrder, new { disabled = true })
    }
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Sequence)
            </div>
            <div class="editor-field-2">
                @{
    if (ViewBag.isEditable)
    {
                    @Html.EditorFor(model => model.Sequence)
    }
    else
    {
                    @Html.DisplayFor(model => model.Sequence)
    }
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
            controlName = "Priority",
            selectedValue = Model != null ? (int)Model.Priority : 0,
            enable = ViewBag.isEditable
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Type)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.OrderType,
        controlName = "Type",
        selectedValue = Model != null ? (int)Model.Type : 0,
        enable = false
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ExternalOrderNo)
            </div>

            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.StartTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.WindowTime, (String)ViewBag.editorTemplate)
            </div>
          
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyFromName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.Hidden("PartyFrom", Model.PartyFrom)
                @Html.Hidden("PartyTo", Model.PartyTo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PartyToName)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyToName)
            </div>
           
           
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LocationFromName)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
     new
     {
         ControlId = "MasterLocationFrom",
         controlName = "LocationFrom",
         selectedValue = Model.LocationFrom,
         checkRegion = true,
         enable = ViewBag.isEditable
     });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.LocationToName)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
     new
     {
         ControlId = "MasterLocationTo",
         controlName = "LocationTo",
         selectedValue = Model.LocationTo,
         checkRegion = true,
         enable = ViewBag.isEditable
     });
                }
            </div>
         
            <div class="editor-label-2">
               拨次
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.TraceCode)
            </div>
            @*<div class="editor-label-2">
                @Html.LabelFor(model => model.Currency)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CurrencyDropDownList", "Common",
        new { controlName = "Currency", selectedValue = Model.Currency, enable = ViewBag.isEditable });
                }
            </div>*@
              <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderStatus,
            controlName = "Status",
            selectedValue = Model != null ? (int)Model.Status : 0,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToContact)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ShipToContact)
            </div>
        </div>
    </fieldset>
    <div id="divMore" style="display: none">
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelDate)
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_BarCodeOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.HuTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
            controlName = "HuTemplate",
            selectedValue = Model.HuTemplate,
            enable = ViewBag.isEditable
        });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveScanHu)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsReceiveScanHu)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsReceiveScanHu, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsShipScanHu)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsShipScanHu)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsShipScanHu, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsReceiveFifo)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsReceiveFifo)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsReceiveFifo, new { disabled = true })
    }
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_PrintOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintOrder)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsPrintOrder)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsPrintOrder, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.OrderTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate, controlName = "OrderTemplate", selectedValue = Model.OrderTemplate, enable = ViewBag.isEditable });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintAsn)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsPrintAsn)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsPrintAsn, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.AsnTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.AsnTemplate, controlName = "AsnTemplate", selectedValue = Model.AsnTemplate, enable = ViewBag.isEditable });
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintReceipt)
                </div>
                <div class="editor-field-2">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsPrintReceipt)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsPrintReceipt, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReceiptTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate, controlName = "ReceiptTemplate", selectedValue = Model.ReceiptTemplate, enable = ViewBag.isEditable });
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_OrderControl</legend>
            <div class="editor">
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsOrderFulfillUC)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsOrderFulfillUC)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsOrderFulfillUC, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipFulfillUC)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsShipFulfillUC)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsShipFulfillUC, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveFulfillUC)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsReceiveFulfillUC)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsReceiveFulfillUC, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsManualCreateDetail)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsManualCreateDetail)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsManualCreateDetail, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsListPrice)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsListPrice)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsListPrice, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsCreatePickList)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsCreatePickList)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsCreatePickList, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipByOrder)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsShipByOrder)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsShipByOrder, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsReceiveExceed)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsReceiveExceed)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsReceiveExceed, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsShipExceed)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsShipExceed)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsShipExceed, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAsnUniqueReceive)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAsnUniqueReceive)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsAsnUniqueReceive, new { disabled = true })
    }
                    }
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_AutomaticControl</legend>
            <div class="editor">
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoRelease)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAutoRelease)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsAutoRelease, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoStart)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAutoStart)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsAutoStart, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoShip)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAutoShip)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsAutoShip, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoReceive)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAutoReceive)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsAutoReceive, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsAutoBill)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsAutoBill)
    }

    else
    {
                        @Html.CheckBoxFor(model => model.IsAutoBill, new { disabled = true })
    }
                    }
                </div>
                <div class="editor-label-3">
                    @Html.LabelFor(model => model.IsInspect)
                </div>
                <div class="editor-field-3">
                    @{
    if (ViewBag.isEditable)
    {
                        @Html.CheckBoxFor(model => model.IsInspect)
    }
    else
    {
                        @Html.CheckBoxFor(model => model.IsInspect, new { disabled = true })
    }
                    }
                </div>
            </div>
        </fieldset>
    </div>
    <div>
        <a type="text/html" onclick="More(this)" href="#" id="more">More... </a>
    </div>
    
    <div style=" text-align:center;">
        @{
    if (Model.Status == com.Sconit.CodeMaster.OrderStatus.Create)
    {
            @Html.Button(Resources.Global.Button_Save, "Url_OrderMstr_Procurement_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnEdit"},
        {"needconfirm","true"}
	})
            @Html.Button(Resources.Global.Button_Submit, "Url_OrderMstr_Procurement_Submit", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnSubmit"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProcurementOrder/Submit/" + Model.OrderNo) +"'"}
	})

            @Html.Button(Resources.Global.Button_Delete, "Url_OrderMstr_Procurement_Delete", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "Delete"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProcurementOrder/Delete/" + Model.OrderNo) +"'"}
	})
    }

    if (Model.Status == com.Sconit.CodeMaster.OrderStatus.Submit)
    {
            @Html.Button(Resources.Global.Button_Cancel, "Url_OrderMstr_Procurement_Cancel", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "Cancel"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProcurementOrder/Cancel/" + Model.OrderNo) +"'"}
	})
        if (ViewBag.IsShowSpecify)
        {
    @Html.Button("指定寄售供应商", "Procurement_Btn_SpecifyOrderCSSupplier", new Dictionary<string, string>()
            {
	            {"type", "button"},
	            {"id", "btnSpecify"},
                {"needconfirm","true"},
                {"onclick","onSpecifyClick()"}
            })
        }
    }

    if (Model.Status == com.Sconit.CodeMaster.OrderStatus.InProcess)
    {
            @Html.Button(Resources.Global.Button_Close, "Url_OrderMstr_Procurement_Close", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "Close"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProcurementOrder/Close/" + Model.OrderNo) +"'"}
	})
    }
    if (Model.Status != com.Sconit.CodeMaster.OrderStatus.Cancel && Model.Status != com.Sconit.CodeMaster.OrderStatus.Create)
    {
            <button type="button" id="btnPrint" onclick="Print()">@Resources.Global.Button_Print</button>
            <button type="button" id="btnExport" onclick="Export()">@Resources.Global.Button_Export</button>
            
    }
    if (Model.SubType == com.Sconit.CodeMaster.OrderSubType.Normal)
    {
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProcurementOrder/List")'">@Resources.Global.Button_Back</button>
    }
    else
    {
            <button type="button" id="btnBack1" onclick="location.href='@Url.Content("~/ProcurementOrder/ReturnList")'">@Resources.Global.Button_Back</button>
    }
    if (Model.Status == com.Sconit.CodeMaster.OrderStatus.Submit && Model.SubType == com.Sconit.CodeMaster.OrderSubType.Normal && (Model.PartyFrom == "LOC" || Model.PartyFrom == "SQC") && Model.Type != com.Sconit.CodeMaster.OrderType.Distribution)
    {
         @Html.Button("重新发送", "Url_ReCreateDat", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "ReCreateDat"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProcurementOrder/ReCreateOrderDat/" + Model.OrderNo) +"'"}
	})
    }
        }
    
    


    </div>
}
@{
    Html.RenderAction("_OrderDetailList", "ProcurementOrder", new { flow = Model.Flow, orderNo = Model.OrderNo, orderSubType = (int)Model.SubType,itmes=string.Empty});
}
<form id="hiddenForm" action="/ProcurementOrder/SaveToClient" target="_blank"
method="post">
<input id="orderNo" name="orderNo" type="hidden" />
</form>
<script type="text/javascript" language="javascript">
    //指定寄售供应商
    function onSpecifyClick() {

        var data = {
            "orderNo": $("#OrderNo").val()
        }
        $("#btnSpecify").attr("disabled", true);
        $.ajax({
            type: "post",
            dataType: "json",
            data: data,
            url: "@Url.Content("~/ProcurementOrder/SpecifyOrderCSSupplier/")",
            cache: false,
            success: function (returnData, textStatus) {
                DisplayJsonMessages(returnData);
                $("#btnSpecify").attr("disabled", false);
                $.ajax({
                    type: "get",
                    dataType: "html",
                    data: { orderNo: $("#OrderNo").val() },
                    url: "@Url.Content("~/ProcurementOrder/Edit/")",
                    cache: false,
                    success: function (data, textStatus) {
                        var $tGrid = $("#content");
                        $($tGrid).html(data);
                    }
                });
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
                $("#btnSpecify").attr("disabled", false);
            }
        });
    }
//    function Export(e) {
//        window.open("/ProcurementOrder/SaveToClient/?orderNo=" + $("#OrderNo").val());

//    }
    function Export(e) {
        $("#orderNo").val($("#OrderNo").val());
        $("#hiddenForm").submit();
    }

    function Print(e) {
        var data = {
            "orderNo": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "@Url.Content("~/ProcurementOrder/Print/")",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = "<li>" + XMLHttpRequest.responseText + "</li>";
                $("#errorsul").html(errorMessages);
            }
        });
    }
    function Distributionclick() {
        var data = {
            "orderNo": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "text",
            url: "@Url.Content("~/ProcurementOrder/PrintDistributeLabel/")",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    PrintOrder(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                var errorMessages = "<li>" + XMLHttpRequest.responseText + "</li>";
                $("#errorsul").html(errorMessages);
            }
        });
    
    }
</script>
