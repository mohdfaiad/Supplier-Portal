@model com.Sconit.Entity.ORD.MiscOrderMaster
@using com.Sconit.Entity.CUST
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_MiscInvInit_View" });
}
<script type="text/javascript">
    function Region_Change(e) {
        $('#Location').data('tComboBox').value('');
        $('#Location').data('tComboBox').text('');
        $("#Location").data("tComboBox").reload();
    }

    function Location_DataBinding(e) {
        e.data = {
            region: $("#Region").val()
        };
    }

    function InMisc_OnSuccess(e) {
        TelerikonUpload_OnSuccess(e);
        $('.t-upload-files').remove();
        var data = {
            "miscOrderNo": $("#MiscOrderNo").val()
        }
        var url = "@Url.Content("~/MiscInvInit/_MiscOrderDetail/")";
        $.ajax({
            type: "get",
            dataType: "html",
            url: url,
            cache: false,
            data: data,
            success: function (data, textStatus) {
                var $tGrid = $("#divOutMiscOrderDetailList");
                $($tGrid).html(data);
            }
        });
    }

    function onUpload(e) {
        e.data = { miscOrderNo: $("#MiscOrderNo").val() };

    }
    function onEdit() {
        var grid = $("#MiscOrderDetailGrid").data("tGrid");
        var miscmstr = {
            "MiscOrderNo": $("#MiscOrderNo").val(),
            "Location": $("#MasterLocation").val()
        }

        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);

        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "html",
            url: "@Url.Content("~/MiscInvInit/EditMiscOrder/")",
            data: $.extend(oderDetails, miscmstr),
            success: function (data) {
                $("#content").html(data);
//                if (data != "") {
//                    location.href = "@Url.Content("~/MiscInvInit/Edit/?id=")" + data;
//                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>

    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.MiscOrderNo)
            </div>
            <div class="search-field">
                @Html.DisplayFor(model => model.MiscOrderNo)
            </div>
            @if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Cancel)
            {
                <div class="search-label">
                    <label for="MiscOrderMstr_Status">
                        @Html.LabelFor(model => model.CancelMoveType)
                    </label>
                </div>
                <div class="search-field">
                    @Html.DisplayFor(model => model.CancelMoveType)
                </div>
            }
            else
            {
                <div class="search-label">
                    <label for="MiscOrderMstr_Status">
                        @Html.LabelFor(model => model.MoveType)
                    </label>
                </div>
                <div class="search-field">
                    @Html.DisplayFor(model => model.MoveType)
                </div>
            }
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                @if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
                {
                    @Html.EditorFor(model => model.EffectiveDate)
                    @Html.ValidationMessageFor(model => model.EffectiveDate)
                }
                else
                {
                    @Html.DisplayFor(model => model.EffectiveDate)
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Region)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Region)
                @Html.Hidden("Region", Model.Region)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Location)
            </div>
            <div class="editor-field-2">
                @{
                Html.RenderAction("_LocationComboBox", "Common",
                new
                {
                    controlName = "Location",
                    includeBlank = true,
                    checkRegion = true,
                    ControlId = "MasterLocation",
                    enable = Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create,
                    selectedValue = Model != null ? Model.Location : string.Empty
                });
                }
                @Html.ValidationMessageFor(model => model.Location)
            </div>
           
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                 @{
        Html.RenderAction("_CodeMasterDropDownList", "Common", new
        {
            code = com.Sconit.CodeMaster.CodeMaster.MiscOrderStatus,
            controlName = "Status",
            enable = false,
            selectedValue = Model!=null? (int)Model.Status : 0
        });
                }
            </div>
            @{
                if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
                {
                <div class="search-label">
                    <label>
                        <a href="@Url.Content("~/Resource/Templates/UploadTemplate/InMiscOrder.xls")">模板下载</a>
                    </label>
                </div>
                <div class="search-field">
                    @(Html.Telerik().Upload()
                    .Name("attachments")
                    .Multiple(false)
                    .Async(async => async
                    .Save("ImportInMiscOrderDetail", "MiscInvInit"
                               )

                        .AutoUpload(true))
                            .ClientEvents(e => e.OnSuccess("InMisc_OnSuccess"))
                                  .ClientEvents(c => c
                                                        .OnUpload("onUpload")
                                    ))
                </div>
                }
            }
            @Html.Hidden("MiscOrderNo", Model.MiscOrderNo)
            @Html.Hidden("MoveType", Model.MoveType)
            @Html.Hidden("CancelMoveType", Model.CancelMoveType)
            @Html.Hidden("Status", Model.Status)
            @Html.Hidden("QualityType", Model.QualityType)
            @Html.Hidden("CreateDate", Model.CreateDate)
            @Html.Hidden("EffectiveDate", Model.EffectiveDate)
            @Html.Hidden("CreateUserId", Model.CreateUserId)
            @Html.Hidden("CreateUserName", Model.CreateUserName)
            @Html.Hidden("Version", Model.Version)
            @Html.Hidden("Type", Model.Type)
        </div>
        <div class="editor-footer">
            @{
       if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Create)
       {   
                @Html.Button(Resources.Global.Button_Save, "Url_MiscInvInit_New", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onEdit()"}
	        })

                @Html.Button(Resources.Global.Button_Delete, "Url_MiscInvInit_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnDelete"},
                    {"needconfirm","true"},
                    {"onclick","location.href='"+@Url.Content("~/MiscInvInit/btnDelete/" + Model.MiscOrderNo) +"'"}
	            })
                @Html.Button(Resources.Global.Button_Confirm, "Url_MiscInvInit_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnClose"},
                    {"needconfirm","true"},
                     {"onclick","location.href='"+@Url.Content("~/MiscInvInit/btnClose/" + Model.MiscOrderNo) +"'"}
	            })
               
       }
       else if (Model.Status == com.Sconit.CodeMaster.MiscOrderStatus.Close)
       {
                @Html.Button(Resources.Global.Button_Cancel, "Url_MiscInvInit_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnCancel"},
                    {"needconfirm","true"},
                    {"onclick","location.href='"+@Url.Content("~/MiscInvInit/btnCancel/" + Model.MiscOrderNo) +"'"}
	            })
       }
            }
            @if ((string)ViewBag.UrlId == "Index")
            {
            <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/MiscInvInit/List")'">
                @Resources.Global.Button_Back</button>
            }
            else { 
             <button type="button" id="btnNewBack" onclick="location.href='@Url.Content("~/MiscInvInit/New")'">
                @Resources.Global.Button_Back</button>
            }
        </div>
    </fieldset>
    <div id="divOutMiscOrderDetailList">
        @{
    Html.RenderAction("_MiscOrderDetail", "MiscInvInit", new { miscOrderNo = Model.MiscOrderNo });
        }
    </div>

