@using com.Sconit.Entity.SYS
@model com.Sconit.Entity.SCM.FlowMaster
@{
    ViewBag.Title = Resources.SCM.FlowMaster.FlowMaster_ProductionLine;
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_ProductionFlow_View" });
}
<script type="text/javascript">
    function PartyFrom_Change(e) {
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
            $('#LocationFrom').data('tComboBox').value('');
            $('#LocationFrom').data('tComboBox').text('');
            $("#LocationFrom").data("tComboBox").reload();

            $('#LocationTo').data('tComboBox').value('');
            $('#LocationTo').data('tComboBox').text('');
            $("#LocationTo").data("tComboBox").reload();
        }
    }

    function LocationFrom_DataBinding(e) {
        e.data = {
            region: $("#PartyFrom").val()
        };
    }

    function LocationTo_DataBinding(e) {
        e.data = {
            region: $("#PartyFrom").val()
        };
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Code)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Code)
                @Html.ValidationMessageFor(model => model.Code)
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ProdLineType)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_ProdLineTypeDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.ProdLineType,
            isAssemblyFlow = false,
            controlName = "ProdLineType",
            includeBlankOption = true,
            blankOptionDescription = "",
            selectedValue = Model != null ? ((int)Model.ProdLineType).ToString() : "-1"
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsActive)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsActive", true)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionDescription)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_DAUAT)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.DAUAT)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ReferenceFlow)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common",
    new
    {
        controlName = "ReferenceFlow",
        selectedValue = Model != null ? Model.ReferenceFlow : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionPartyFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_RegionComboBox", "Common",
    new
    {
        controlName = "PartyFrom",
        isChange = true,
        selectedValue = Model != null ? Model.PartyFrom : string.Empty
    });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionLocationFrom)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
        new
        {
            controlName = "LocationFrom",
            checkRegion = true,
            selectedValue = Model != null ? Model.LocationFrom : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_ProductionLocationTo)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_LocationComboBox", "Common",
    new
    {
        controlName = "LocationTo",
        checkRegion = true,
        selectedValue = Model != null ? Model.LocationTo : string.Empty
    });
                }
            </div>
            <div class="editor-label-1">
                <label>@Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceFormat</label>
            </div>
            <div class="editor-field-1">
                @Resources.SCM.FlowDetail.FlowDetail_ExtraDemandSourceToolTips
            </div>
            <div class="editor-label-1">
                @Html.LabelFor(model => model.ExtraDemandSource)
            </div>
            <div class="editor-field-1">
                @Html.TextBoxFor(model => model.ExtraDemandSource)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.MaxOrderCount)
            </div>
            <div class="editor-field-2">
                @Html.Telerik().NumericTextBoxFor(model => model.MaxOrderCount).DecimalDigits(0).MinValue(0)
                @Html.ValidationMessageFor(model => model.MaxOrderCount)
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Routing)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_RoutingComboBox", "Common", new
    {
        controlName = "Routing",
        controlId = "FlowMasterRouting",
        selectedValue = Model != null ? Model.Routing : string.Empty
    });
                }
                @Html.ValidationMessageFor(model => model.Routing)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReturnRouting)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_RoutingDropDownList", "Common", new
    {
        controlName = "ReturnRouting",
        controlId = "FlowMasterReturnRouting",
        selectedValue = Model != null ? Model.ReturnRouting : string.Empty,
        includeBlankOption = true
    });
                }
                @Html.ValidationMessageFor(model => model.ReturnRouting)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendBarCode</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CreateHuOption)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.CreateHuOption,
            controlName = "CreateHuOption",
            selectedValue = Model != null ? (int)Model.CreateHuOption : 0
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.HuTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.HuTemplate,
            controlName = "HuTemplate",
            selectedValue = Model != null ? Model.HuTemplate : string.Empty
        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendPrint</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsPrintOrder)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintOrder", false)
            </div>
            <div class="editor-label-2">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingOrderTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate,
            controlName = "OrderTemplate",
            selectedValue = Model != null ? Model.OrderTemplate : string.Empty
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.IsPrintRceipt)
            </div>
            <div class="editor-field-2">
                @Html.CheckBox("IsPrintRceipt", false)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReceiptTemplate)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.ReceiptTemplate,
            controlName = "ReceiptTemplate",
            selectedValue = Model != null ? Model.ReceiptTemplate : string.Empty
        });
                }
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_SubconctractingLegendOrderControl</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsOrderFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsOrderFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveFulfillUC)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveFulfillUC", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsListDet)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsListDet", true)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsManualCreateDetail)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsManualCreateDetail", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsReceiveExceed)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsReceiveExceed", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsCheckPartyToAuthority)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsCheckPartyToAuthority", false)
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>@Resources.SCM.FlowMaster.FlowMaster_LegendAutomatic</legend>
        <div class="editor">
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoCreate)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoCreate", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoRelease)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoRelease", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsAutoStart)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoStart", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelFor(model => model.IsAutoReceive)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsAutoReceive", false)
            </div>
            <div class="editor-label-3">
                @Html.LabelForModel(Resources.SCM.FlowMaster.FlowMaster_SubconctractingIsInspect)
            </div>
            <div class="editor-field-3">
                @Html.CheckBox("IsInspect", false)
            </div>
        </div>
    </fieldset>

    <div class="editor-footer">
        @Html.Button(Resources.Global.Button_New, "Url_ProductionFlow_Edit", new Dictionary<string, string>()
	{
	    {"type", "submit"},
	    {"id", "btnNew"},
        {"needconfirm","true"}
	})
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProductionFlow/List")'">
            @Resources.Global.Button_Back</button>
    </div>
}