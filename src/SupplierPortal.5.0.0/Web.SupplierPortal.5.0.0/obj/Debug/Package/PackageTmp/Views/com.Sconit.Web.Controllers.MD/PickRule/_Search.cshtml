@using com.Sconit.Entity.MD
@using com.Sconit.Entity.SYS
@using com.Sconit.Web.Models.SearchModels.MD
<script type="text/javascript">
    function Location_Change(e) {
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }

        }
        $('#SearchPicker').data('tComboBox').value('');
        $('#SearchPicker').data('tComboBox').text('');
        $("#SearchPicker").data("tComboBox").reload();
    }

    function Picker_DataBinding(e) {
        e.data = {
            location: $('#SearchLocation').val()
        };
    }

</script>
<fieldset>
    @using (Html.BeginForm("List", "PickRule"))
    {   
        <div class="search">
            <div class="search-label">
                <label for="Picker_Code">
                    @Resources.MD.Picker.PickRule_Item
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_ItemComboBox", "Common", new
                                                             {
                                                                 controlName = "SearchItem",
                                                                 selectedValue = TempData["PickRuleSearchModel"] != null ? ((PickRuleSearchModel)TempData["PickRuleSearchModel"]).SearchItem : string.Empty
                                                             });
                }
            </div>
            <div class="search-label">
                <label for="PickRule_Location">
                    @Resources.MD.Picker.PickRule_Location
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_LocationComboBox", "Common", new
        {
            ControlId = "SearchLocation",
            controlName = "SearchLocation",
            isChange = true,
            selectedValue = TempData["PickRuleSearchModel"] != null ? ((PickRuleSearchModel)TempData["PickRuleSearchModel"]).SearchLocation : null
        });
                }
            </div>
            <div class="search-label">
                <label for="Picker_UserCode">
                    @Resources.MD.Picker.PickRule_Picker
                </label>
            </div>
            <div class="search-field">
                @{
        Html.RenderAction("_PickerComboBox", "Common", new
                                                             {
                                                                 controlName = "SearchPicker",
                                                                 checkLocation = true,
                                                                 selectedValue = TempData["PickRuleSearchModel"] != null ? ((PickRuleSearchModel)TempData["PickRuleSearchModel"]).SearchPicker : string.Empty
                                                             });
                }
            </div>
        </div>
        <div class="search-footer">
            @Html.Hidden("isFromList", true)
            <button type="submit" id="btnSearch">
                @Resources.Global.Button_Search</button>
            @Html.Button(Resources.Global.Button_New, "Url_PickRule_View", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnNew"},
        {"onclick","location.href='"+@Url.Content("~/PickRule/New")+"'"}
	})
        </div>

    }
</fieldset>
