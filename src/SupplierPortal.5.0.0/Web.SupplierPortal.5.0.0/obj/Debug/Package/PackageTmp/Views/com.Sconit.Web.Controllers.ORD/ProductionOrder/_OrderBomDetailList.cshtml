@using com.Sconit.Entity.MD;
@using com.Sconit.Entity.INV;
@using com.Sconit.Entity.SYS;
@model IEnumerable<com.Sconit.Entity.ORD.OrderBomDetail>
<script type="text/javascript">
    function OrderBomDetailGrid_OnDataBinding(e) {
        e.data = {
            Item: $('#SearchItem').val(),
            Location: $('#SearchLocation').val(),
            Operation: $('#Operation').val(),
            OpReference: $('#OpReference').val(),
            OrderDetailId: $('#OrderDetailId').val()
        };
    }

    function onLocationDataBinding(e) {
        e.data = {
            "Region": $("#Region").val(),
            "checkRegion": true
        };
    }

    function onItemComboBoxChange(e) {
        if (e.value != null) {
            var combobox = $(this).data("tComboBox");
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            } else {
                var data = {
                    "itemCode": e.value
                };
                $.ajax({
                    type: "post",
                    dataType: "json",
                    url: "@Url.Content("~/ProductionOrder/_WebOrderDetail/")",
                    data: data,
                    success: function (data, textStatus) {
                        var $tGrid = $("#OrderBomDetail").data("tGrid");
                        var $itemCell = $(e.target).parent().parent();
                        $itemCell.next().html(data.ItemDescription);
                        $itemCell.next().next().html(data.ReferenceItemCode);
                        $itemCell.next().next().next().html(data.Uom);

                        var oldData = $tGrid.dataItem($itemCell.parent());
                        if (oldData != undefined) {
                            oldData.ItemDescription = data.ItemDescription;
                            oldData.ReferenceItemCode = data.ReferenceItemCode;
                            oldData.Uom = data.Uom;
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        DisplayTextMessages(XMLHttpRequest.responseText);
                    }
                });
            }
        }
    }

    function onSubmit(e) {
        var grid = $("#OrderBomDetail").data("tGrid");
        if (grid == null) {
            alert("明细不能为空");
            return;
        }
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
        var ordermstr = {
            "OrderDetailId": $("#OrderDetailId").val()
        };
        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "Json",
            url: "@Url.Content("~/ProductionOrder/_SaveBomDetailBatchEditing/")",
            data: $.extend(oderDetails, ordermstr),
            success: function (data, ordermstr) {
                DisplayJsonMessages(data);
                if (data != "") {
                    var orderData = {
                        "OrderDetailId": $("#OrderDetailId").val(),
                        "OrderStatus": $("#OrderStatus").val()
                    };
                    $.ajax({
                        type: "get",
                        dataType: "Html",
                        url: "@Url.Content("~/ProductionOrder/_OrderBomDetailList/")",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            $("#divOrderBomDetailList").html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function onManufacturePartyDataBinding(e) {
        e.data = {
            "item": $(e.target).parent().parent().parent().children().eq(1).text()
        }
    }
    function onManufacturePartyChange(e) {
        if (e.value != null) {
            var combobox = $(this).data("tComboBox");
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
            }
        }
    }
</script>
<fieldset>
    @(Html.Telerik().Grid(Model)
        .Name("OrderBomDetail")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
       .Editable(editing => editing.Mode(GridEditMode.InCell))
        .ToolBar(commands =>
        {
            if (!ViewBag.ReadOnly)
            {
                commands.Insert();
                commands.Custom().Text(@Resources.Global.Button_SaveDetail).HtmlAttributes(new { onClick = "onSubmit()", href = "#" });
            }
        })

        .DataBinding(dataBinding =>
                            dataBinding.Ajax().Select("_SelectBomDetailBatchEditing", "ProductionOrder", TempData["OrderBomDetailSearchModel"]))
            .ClientEvents(events => events.OnDataBinding("OrderBomDetailGrid_OnDataBinding"))
        .Columns(columns =>
        {
            columns.Bound(o => o.AUFNR).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.Item).EditorTemplateName("ItemGridForeignKey").ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.ItemDescription).ReadOnly(true);
            columns.Bound(o => o.ReferenceItemCode).ReadOnly(true);
            columns.Bound(o => o.BomUnitQty).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.OrderedQty).ReadOnly(ViewBag.ReadOnly);
            if (ViewBag.ReadOnly)
            {
                columns.Bound(o => o.Uom).ReadOnly(true);
                columns.Bound(o => o.ManufactureParty).ReadOnly();
            }
            else
            {
                columns.ForeignKey(o => o.Uom, (IList<Uom>)ViewData["uoms"], "Code", "Code");
                columns.Bound(o => o.ManufactureParty).EditorTemplateName("ManufacturePartyGridComboBox").Width(150);
            }
            columns.Bound(o => o.Operation).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.ZOPWZ).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.ZOPID).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.ZOPDS).ReadOnly(ViewBag.ReadOnly);
            columns.Bound(o => o.OpReference).ReadOnly(ViewBag.ReadOnly);
            if (ViewBag.ReadOnly)
            {
                columns.Bound(o => o.BackFlushMethodDescription).ReadOnly();
                columns.Bound(o => o.FeedMethodDescription).ReadOnly();
                columns.Bound(o => o.IsAutoFeed).ClientTemplate("<input type='checkbox'  name='IsAutoFeed'  disabled='disabled' <#= IsAutoFeed? checked='checked' : '' #> />");
                columns.Bound(o => o.Location).ReadOnly();
            }
            else
            {
                columns.ForeignKey(o => o.BackFlushMethod, (SelectList)ViewData["BackFlushMethod"], "Value", "Text");
                columns.ForeignKey(o => o.FeedMethod, (SelectList)ViewData["FeedMethod"], "Value", "Text");
                columns.Bound(o => o.IsAutoFeed).ClientTemplate("<input type='checkbox'  name='IsAutoFeed' enabled='false'  <#= IsAutoFeed? checked='checked' : '' #> />");
                columns.Bound(o => o.Location).EditorTemplateName("LocationGridComboBox");
            }
            columns.Bound(o => o.ReserveNo).ReadOnly(true);
            columns.Bound(o => o.ReserveLine).ReadOnly(true);

            if (!ViewBag.ReadOnly)
            {
                columns.Command(commands => commands.Delete()).Width(100);
            }
        })
                  .Pageable(settings =>
                  {
                      settings.Total(ViewBag.Total == null ? 0 : ViewBag.Total);
                      settings.PageSize(20);
                  })

        .Scrollable(c => c.Enabled(false))
        .Sortable()
            )
</fieldset>
