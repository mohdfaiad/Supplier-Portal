@model com.Sconit.Entity.ORD.OrderMaster
@using (Html.BeginForm("_Edit", "ProductionOrder"))
{
    <fieldset>
        <legend>@Resources.ORD.OrderMaster.OrderMaster_BaseInfo</legend>
        <div class="editor">
            <div class="editor-label-2">
                @Html.LabelFor(model => model.OrderNo)
                @Html.HiddenFor(model => model.OrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.OrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Sequence)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Sequence)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_Flow_Production
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_FlowDescription_Production
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.FlowDescription)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
            controlName = "Priority",
            selectedValue = Model != null ? (int)Model.Priority : 0,
            enable = false
        });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Type)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common", new
    {
        code = com.Sconit.CodeMaster.CodeMaster.OrderType,
        controlName = "Type",
        selectedValue = Model != null ? (int)Model.Type : 0,
        enable = false
    });
                }
                @Html.HiddenFor(model => model.Type)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WMSNo)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.WMSNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.TraceCode)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.TraceCode)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_PartyFromName_Production
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PartyFromName)
                @Html.HiddenFor(model => model.PartyFrom)
                @Html.HiddenFor(model => model.PartyFromName)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_LocationFromName_Production
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.LocationFromName)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_LocationToName_Production
                </label>
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.LocationToName)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Status)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.OrderStatus,
            controlName = "Status",
            selectedValue = Model != null ? (int)Model.Status : 0,
            enable = false
        });
                }
                @Html.HiddenFor(model => model.Status)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PauseTime)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PauseTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PauseSequence)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.PauseSequence)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.PauseStatus)
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new
        {
            code = com.Sconit.CodeMaster.CodeMaster.PauseStatus,
            controlName = "PauseStatus",
            selectedValue = Model != null ? (int)Model.PauseStatus : 0,
            enable = false
        });
                }
                @Html.HiddenFor(model => model.PauseStatus)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.CurrentOperation)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.CurrentOperation)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ProductLineFacility)
            </div>
            <div class="editor-field-2">
                @Html.DisplayFor(model => model.ProductLineFacility)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.StartTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.WindowTime, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_Remarks
                </label>
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.Dock, (String)ViewBag.editorTemplate)
            </div>
            <div class="editor-label-2">
            </div>
            <div class="editor-field-2">
            </div>
        </div>
    </fieldset>
    <div id="divMore" style="display: none">
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_Audit</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateUserName)
                    @Html.HiddenFor(model => model.CreateUserName)
                    @Html.HiddenFor(model => model.CreateUserId)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CreateDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CreateDate)
                    @Html.HiddenFor(model => model.CreateDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.LastModifyDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.LastModifyDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.ReleaseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.ReleaseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.StartDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.StartDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CloseDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CloseDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CancelDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CancelDate)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CompleteUserName)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CompleteUserName)
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.CompleteDate)
                </div>
                <div class="editor-field-2">
                    @Html.DisplayFor(model => model.CompleteDate)
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>@Resources.ORD.OrderMaster.OrderMaster_PrintOption</legend>
            <div class="editor">
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.IsPrintOrder)
                </div>
                <div class="editor-field-2">
                    @Html.CheckBoxFor(model => model.IsPrintOrder, new { disabled = true })
                </div>
                <div class="editor-label-2">
                    @Html.LabelFor(model => model.OrderTemplate)
                </div>
                <div class="editor-field-2">
                    @{
    Html.RenderAction("_CodeMasterDropDownList", "Common",
        new { code = com.Sconit.CodeMaster.CodeMaster.OrderTemplate, controlName = "OrderTemplate", selectedValue = Model.OrderTemplate, enable = false });
                    }
                </div>
            </div>
        </fieldset>
    </div>
    <div>
        <a type="text/html" onclick="More(this)" href="#" id="more">More...</a>
    </div>
    <div style="text-align: center;">
        @if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Create)
        {
            @Html.Button(Resources.Global.Button_Save, "Url_OrderMstr_Production_Edit", new Dictionary<string, string>()
	        {
	            {"type", "submit"},
	            {"id", "btnSave"},
                {"needconfirm","true"}
	        })

            @Html.Button(Resources.Global.Button_Submit, "Url_OrderMstr_Production_Submit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnSubmit"},
                {"needconfirm","true"},
                {"onclick","location.href='"+@Url.Content("~/ProductionOrder/Submit/" + @Model.OrderNo)+"'"}
	        })

      
        }
        @if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Submit)
        {
            @Html.Button(Resources.Global.Button_Start_Production, "Url_OrderMstr_Production_Start", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnStart"},
                {"needconfirm","true"},
                {"onclick","location.href='"+@Url.Content("~/ProductionOrder/Start/" + Model.OrderNo) +"'"}
	        })
            @Html.Button(Resources.Global.Button_Cancel, "Url_OrderMstr_Production_Cancel", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnCancel"},
                {"needconfirm","true"},
                {"onclick","location.href='"+@Url.Content("~/ProductionOrder/Cancel/" + Model.OrderNo) +"'"}
	        })
           
        }
        @if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.InProcess || ViewBag.status == com.Sconit.CodeMaster.OrderStatus.Submit)
        { 
            @Html.Button(Resources.Global.Button_CreateRequisitionList, "Url_OrderMstr_Production_CreateRequisitionList", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnCreateRequisitionList"},
                    {"needconfirm","true"},
                    {"onclick","location.href='"+@Url.Content("~/ProductionOrder/CreateRequisitionList/" + Model.OrderNo) +"'"}
	            })
        }
        @*@if (ViewBag.status == com.Sconit.CodeMaster.OrderStatus.InProcess)
        {
            @Html.Button(Resources.Global.Button_Close, "Url_OrderMstr_Production_Close", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnClose"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProductionOrder/Close/" + Model.OrderNo) +"'"}
	})
        
          
        }*@
        @Html.Button(Resources.Global.Button_Check, "Url_OrderMstr_Production_Check", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnCheck"},
        {"needconfirm","true"},
        {"onclick","location.href='"+@Url.Content("~/ProductionOrder/Check/" + Model.OrderNo) +"'"}
	})
        @if (Model.Status != com.Sconit.CodeMaster.OrderStatus.Cancel && Model.Status != com.Sconit.CodeMaster.OrderStatus.Create)
        {
          
            
            @Html.Button(Resources.Global.Button_RequisitionDetail, "Url_OrderMstr_Production_CreateRequisitionList", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnRequisitionDetail"},
        {"onclick","OpenRequisitionDetailWindow();"}
	})
            <button type="button" id="btnPrint" onclick="Print();">
                @Resources.Global.Button_Print</button>
        }
        @Html.Button(Resources.Global.Button_KBOrderBomDet, "Url_OrderMstr_Production_KBOrderBomDetailList", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnKBOrderBomDet"},
        {"onclick","OpenKBOrderBomDetWindow();"}
	})
        <button type="button" id="btnExport" onclick="Export();">
            @Resources.Global.Button_Export</button>
        <button type="button" id="btnBack" onclick="location.href='@Url.Content("~/ProductionOrder/VanList")'">
            @Resources.Global.Button_Back</button>
    </div>
}
@{
    Html.RenderAction("_OrderDetailList", "ProductionOrder", new { flow = ViewBag.flow, orderNo = ViewBag.orderNo });
}
@{Html.Telerik().Window()
        .Name("RequisitionDetailWindow")
        .Title(Resources.Global.Button_RequisitionDetail)
        .Draggable(true)
        .Scrollable(false)
        .Resizable()
        .Width(900)
       .Height(300)
        .Visible(false)
           .Modal(true)

       .Render();
}
@{Html.Telerik().Window()
        .Name("KBOrderBomDetWindow")
        .Title(Resources.Global.Button_KBOrderBomDet)
        .Draggable(true)
        .Scrollable(false)
        .Resizable()
        .Width(1000)
       .Height(500)
        .Visible(false)
           .Modal(true)

       .Render();
}
<form id="hiddenForm" action="/ProductionOrder/SaveToClient" target="_blank" method="post">
<input id="orderNo" name="orderNo" type="hidden" />
</form>
<script type="text/javascript" language="javascript">
    //    function Export(e) {
    //        window.open("/DistributionOrder/SaveToClient/?orderNo=" + $("#OrderNo").val());
    //    }
    function Export(e) {
        $("#orderNo").val($("#OrderNo").val());
        $("#hiddenForm").submit();
    }

    function Print(e) {
        var data = {
            "orderNos": $("#OrderNo").val()
        };
        $.ajax({
            type: "post",
            dataType: "json",
            url: "@Url.Content("~/ProductionOrder/Print/")",
            data: data,
            success: function (data, textStatus) {
                if (data != "") {
                    var urls = data.PrintUrl.split(',');
                    for (var i = 0; i < urls.length; i++) {
                        PrintOrder(urls[i]);
                    }
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function OpenRequisitionDetailWindow() {
        var detailWindow = $("#RequisitionDetailWindow").data("tWindow");
        detailWindow.ajaxRequest("@Url.Content("~/ProductionOrder/_RequisitionDetailWindow/")", { orderNo: $("#OrderNo").val() })
        detailWindow.center().open();
    }

    function OpenKBOrderBomDetWindow() {
        var detailWindow = $("#KBOrderBomDetWindow").data("tWindow");
        detailWindow.ajaxRequest("@Url.Content("~/ProductionOrder/_KBOrderBomDetWindow/")", { orderNo: $("#OrderNo").val() })
        detailWindow.center().open();
    }

    function More(va) {
        if (va.innerHTML == "More...") {

            document.getElementById("divMore").style.display = 'inline'
            document.getElementById("more").innerHTML = "Hide...";
        }
        else {
            document.getElementById("divMore").style.display = 'none'
            document.getElementById("more").innerHTML = "More...";
        }
    }
</script>
