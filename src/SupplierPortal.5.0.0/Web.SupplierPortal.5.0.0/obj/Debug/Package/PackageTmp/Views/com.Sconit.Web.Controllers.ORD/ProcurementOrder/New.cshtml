@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Procurement_New" });
}
<script type="text/javascript">
    function Flow_Change(e) {
        $("#WindowTime").val('');
        $("#StartTime").val('');
        if (e.value != "") {
            var combobox = $(this).data("tComboBox");
            if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
                combobox.value("");
                combobox.reload();
                $("#fdOrderDetail").hide();
            } else {
                var data = { "flow": e.value,"items":$("#Items").val()};
                $.ajax({
                    type: "get",
                    dataType: "html",
                    url: "@Url.Content("~/ProcurementOrder/_OrderDetailList/")",
                    data: data,
                    cache: false,
                    success: function (data, textStatus) {
                        $("#fdOrderDetail").html(data);
                        $("#fdOrderDetail").show();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        DisplayTextMessages(XMLHttpRequest.responseText);
                    }
                });
            }
        }
    }

    function searchClick(e) {
        $("#WindowTime").val('');
        $("#StartTime").val('');
        if ($("#Flow").val() == "") {
            $message.error("路线代码不能为空。");
            return;
        }
        var data = { "flow": $("#Flow").val(), "items": $("#Items").val() };
        $.ajax({
            type: "get",
            dataType: "html",
            url: "@Url.Content("~/ProcurementOrder/_OrderDetailList/")",
            data: data,
            cache: false,
            success: function (data, textStatus) {
                $("#fdOrderDetail").html(data);
                $("#fdOrderDetail").show();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }

    function onWindowTimeChange(e) {
        if ($("#Flow").val() != null && $("#Flow").val() != "") {
            $.ajax({
                type: "Post",
                dataType: "text",
                url: "@Url.Content("~/ProcurementOrder/_WindowTime/")",
                data: { "windowTime": e.value.toLocaleString(), "flow": $("#Flow").val() },
                success: function (data, textStatus) {
                    var newDate = new Date(data);
                    // $("#StartTime").val(data);
                    $("#StartTime").val(data);
                    // $("#StartTime").data("tDateTimePicker").selectedValue = newDate;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }

    function onCreate() {
        ClearMessage();
        var grid = $("#OrderDetail").data("tGrid");
        if (grid == null) {
            $message.error('@Resources.ORD.OrderMaster.Errors_OrderDetailIsEmpty');
            return;
        }
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
        var ordermstr = {
            "Flow": $("#Flow").val(),
            "StartTime": $("#StartTime").val(),
            "WindowTime": $("#WindowTime").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "ReferenceOrderNo": $("#ReferenceOrderNo").val(),
            "ExternalOrderNo": $("#ExternalOrderNo").val(),
            "Priority": $("input[type=radio][name=Priority]:checked").val(),
            "Shift": $("#Shift").val(),
            "ShipToContact": $("#ShipToContact").val()

        }

        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "json",
            url: "@Url.Content("~/ProcurementOrder/CreateOrder/")",
            data: $.extend(oderDetails, ordermstr),
            success: function (data, ordermstr) {
                if (data != "") {
                    DisplayJsonMessages(data);
                    var orderData = {
                        "orderNo": data.Data.OrderNo
                    };

                    $.ajax({
                        type: "post",
                        dataType: "html",
                        url: "@Url.Content("~/ProcurementOrder/Edit/")",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });

    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
             
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Flow)
            </div>
            <div class="editor-field-2">
                @{
           Html.RenderAction("_FlowComboBox", "Common", new { controlName = "Flow", type = (int)com.Sconit.CodeMaster.OrderType.OnlySupplier, isChange = true, isCreateOrder = true });
                }
                @Html.ValidationMessageFor(model => model.Flow)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                .Name("EffectiveDate")
                        )
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.WindowTime)
            </div>
            <div class="editor-field-2">
                @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("WindowTime")
                            .ClientEvents(events => events
                            .OnChange("onWindowTimeChange")
                        )
                    )
                @Html.ValidationMessageFor(model => model.WindowTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.StartTime)
            </div>
            <div class="editor-field-2">
                @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                            .Name("StartTime")
                        )
                @Html.ValidationMessageFor(model => model.StartTime)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ExternalOrderNo)
            </div>
            <div class="search-label">
                <label for="OrderMaster_Shift_CreateOrderCode">
                    @Resources.ORD.OrderMaster.OrderMaster_Shift_CreateOrderCode
                </label>
            </div>
            <div class="search-field">
                @{
               Html.RenderAction("_CreateOrderCodeComboBox", "Common",
                          new
                          {
                              controlName = "Shift"
                          });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ShipToContact)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ShipToContact)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.Priority)
            </div>
            <div class="editor-field-2">
                @*@{
                    Html.RenderAction("_CodeMasterDropDownList", "Common",
                        new
                        {
                            code = com.Sconit.CodeMaster.CodeMaster.OrderPriority,
                            controlName = "Priority",
                            selectedValue = Model != null ? (int)Model.Priority : 0
                        });
                }*@
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Normal, true)@Resources.CodeDetail.CodeDetail_OrderPriority_Normal
                @Html.RadioButton("Priority", (int)com.Sconit.CodeMaster.OrderPriority.Urgent)@Resources.CodeDetail.CodeDetail_OrderPriority_Urgent
            </div>
            <div class="search-label">
                <label for="Hu_HuId">
                    @Resources.INV.LocationLotDetail.LocationLotDetail_Item
                </label>
            </div>
            <div class="search-field">
            @Html.TextArea("Items", string.Empty, new { rows = 4, style = "min-height:0;width:50%" })
            </div>
        </div>
        <div class="editor-footer">
            <input type="button" onclick="searchClick()" value="查询" />
            @Html.Button(Resources.Global.Button_New, "Url_OrderMstr_Procurement_Edit", new Dictionary<string, string>()
	        {
	            {"type", "button"},
	            {"id", "btnNew"},
                {"needconfirm","true"},
                {"onclick","onCreate()"}
	        })
        </div>
    </fieldset>
   
    <div id="fdOrderDetail" style="display: none;">
    </div>
   
}
