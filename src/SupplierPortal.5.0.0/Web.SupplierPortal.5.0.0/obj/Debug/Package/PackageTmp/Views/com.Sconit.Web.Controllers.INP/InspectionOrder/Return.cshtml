@using com.Sconit.Web.Models.SearchModels.INP
 @model IEnumerable<com.Sconit.Entity.INP.InspectResult>
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_InspectionOrder_Return" });
}
<script type="text/javascript">
    function onCreate() {
        var grid = $("#InspectResult").data("tGrid");
        var rows = grid.$tbody.children("tr:not(.t-no-data)");
        var idStr = "";
        var qtyStr = "";

        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var row = $(rows[rowIndex]);
            var id = row.children().eq(0).text();

            var qty = row.find("#CurrentHandleQty").val();
            if (qty != "" && !isNaN(qty) && parseFloat(qty) > 0) {
                if (idStr == "") {
                    idStr = id;
                    qtyStr = qty;
                } else {
                    idStr += "," + id;
                    qtyStr += "," + qty;
                }
            }
        }
        var data = {
            "handleResult": 2,
            "idStr": idStr,
            "qtyStr": qtyStr,
            "flow": $("#Flow").val()
        }
        $.ajax({
            type: "post",
            dataType: "json",
            url: "@Url.Content("~/InspectionOrder/CreateReturnOrder/")",
            data: data,
            cache: false,
            success: function (data) {
                ClearMessage();
                DisplayJsonMessages(data);
                onSearch();
                //                if (data != "") {
                //                    var rejectData = {
                //                        "id": data
                //                    };
                //                    $.ajax({
                //                        type: "get",
                //                        dataType: "html",
                //                        url: "/RejectOrder/Edit/",
                //                        data: rejectData,
                //                        cache: false,
                //                        success: function (data, textStatus) {
                //                            var $tGrid = $("#content");
                //                            $($tGrid).html(data);
                //                        }
                //                    });
                //                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
  

    function onSearch() {

        var data = {
            InspectNo: $('#InspectNo').val(),
            Item: $('#Item').val(),
            IpNo: $('#IpNo').val(),
            ReceiptNo: $("#ReceiptNo").val(),
            WMSNo: $("#WMSNo").val(),
            CreateUserName: $("#CreateUserName").val(),
            CurrentLocation: $("#CurrentLocation").val(),
            StartDate: $("#StartDate").val(),
            EndDate: $("#EndDate").val(),
            InspectType: $("input[type=radio][checked]").val()
             };
            $.ajax({
                type: "get",
                dataType: "html",
                url: "@Url.Content("~/InspectionOrder/InspectionOrderDetailList/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    $("#InspectionOrderDetailListDiv").html(data);
                    $("#InspectionOrderDetailListDiv").show();
                    $("#btnTransfer").attr("style", "display:inline");
                    $("#FlowDiv").attr("style", "display:inline");
                    $("#DetailsDiv").attr("style", "display:inline");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        
    }
</script>
 @using (Html.BeginForm("ConcessinOrderNew", "InspectionOrder"))
        {  
    <fieldset>
        <div class="search">
                <div class="search-label">
                    <label for="InspectResult_InpNo">
                        @Resources.INP.InspectResult.InspectResult_InpNo
                    </label>
                </div>
                <div class="search-field">
                    @Html.TextBox("InspectNo", TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).InspectNo : string.Empty)
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_IpNo
                    </label>
                </div>
                <div class="search-field">
                    @Html.TextBox("IpNo", TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).IpNo : string.Empty)
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_ReceiptNo
                    </label>
                </div>
                <div class="search-field">
                    @Html.TextBox("ReceiptNo", TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).ReceiptNo : string.Empty)
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_WMSNo
                    </label>
                </div>
                <div class="search-field">
                    @Html.TextBox("WMSNo", TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).WMSNo : string.Empty)
                </div>
                <div class="search-label">
                    <label for="InspectResult_Item">
                        @Resources.INP.InspectResult.InspectResult_Item
                    </label>
                </div>
                <div class="search-field">
                    @{
            Html.RenderAction("_ItemComboBox", "Common", new
            {
                controlName = "Item",
                selectedValue = TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).Item : string.Empty
            });
                    }
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_CurrentLocation
                    </label>
                </div>
                <div class="search-field">
                    @{
            Html.RenderAction("_LocationComboBox", "Common", new
           {
               controlName = "CurrentLocation",
               selectedValue = TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).CurrentLocation : string.Empty

           });
                    }
                </div>
                <div class="search-label">
                    <label for="InspectMaster_StartDate">
                        @Resources.INP.InspectMaster.InspectMaster_StartDate
                    </label>
                </div>
                <div class="search-field">
                    @(Html.Telerik().DatePicker().Format(com.Sconit.Entity.BusinessConstants.SHORT_DATE_FORMAT).Name("StartDate")
     .Value(TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).StartDate : System.DateTime.Today)
                    .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
                </div>
                <div class="search-label">
                    <label for="InspectMaster_EndDate">
                        @Resources.INP.InspectMaster.InspectMaster_EndDate
                    </label>
                </div>
                <div class="search-field">
                    @(Html.Telerik().DatePicker().Format(com.Sconit.Entity.BusinessConstants.SHORT_DATE_FORMAT).Name("EndDate")
             .Value(TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).EndDate : System.DateTime.Today.AddDays(1))
                    .HtmlAttributes(new { style = "margin-bottom: 1.3em;width:200px" }))
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_CreateUserName
                    </label>
                </div>
                <div class="search-field">
                    @Html.TextBox("CreateUserName", TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).CreateUserName : string.Empty)
                </div>
                <div class="search-label">
                    <label for="InspectResult_IpNo">
                        @Resources.INP.InspectResult.InspectResult_InspectType
                    </label>
                </div>
                <div class="search-field">
                 
                         @{ 
            var aa = ViewBag.InspectType != null ? (ViewBag.InspectType == 1 ? true : false) : true;
                        
                @Html.RadioButton("InspectType", (int)com.Sconit.CodeMaster.InspectType.Quantity, aa)@Resources.CodeDetail.CodeDetail_InspectType_Quantity<span style=" margin:4px"></span> 
                @Html.RadioButton("InspectType", (int)com.Sconit.CodeMaster.InspectType.Barcode, !aa)@Resources.CodeDetail.CodeDetail_InspectType_Barcode 

    }
                </div>
            </div>
        <div class="editor-footer">
         @Html.Button(Resources.Global.Button_Search, "InspectionOrder_ConcessionOrder_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnSearch"},
                    {"onclick","onSearch()"}
	            })
            @Html.Button(Resources.Global.Button_New, "InspectionOrder_ConcessionOrder_New", new Dictionary<string, string>()
	            {
	                {"type", "button"},
	                {"id", "btnConcession"},
                    {"needconfirm","true"},
                    {"onclick","onCreate()"}
	            })
        </div>
    </fieldset>
      <div id="DetailsDiv" style="display:none">
   <fieldset>
  
    <div id="FlowDiv" style="display:none">
        <div class="search-label">
                <label for="OrderMaster_Flow">
                    @Resources.ORD.OrderMaster.OrderMaster_Flow
                </label>
            </div>
            <div class="search-field">
                @{
            Html.RenderAction("_FlowComboBox", "Common",
                new
                {
                    controlName = "Flow",
                    type = (int)com.Sconit.CodeMaster.OrderType.Procurement,
                    selectedValue = TempData["InspectResultSearchModel"] != null ? ((InspectResultSearchModel)TempData["InspectResultSearchModel"]).Flow : string.Empty
                });
                }
            </div>
    </div>
     <br /> <br /> 
<div id="InspectionOrderDetailListDiv">

    @{
            // Html.RenderAction("InspectionOrderDetailList", "InspectionOrder");
}
</div>

</fieldset>
</div>
   
}
