@model com.Sconit.Entity.ORD.OrderMaster
@{
    Html.RenderAction("_SiteMapPath", "Common", new { MenuContent = "Url_OrderMstr_Production_QuickNew" });
}
<script type="text/javascript">
    function Flow_Change(e) {
        var combobox = $(this).data("tComboBox");
        if (combobox.selectedIndex == undefined || combobox.selectedIndex == -1) {
            combobox.value("");
            window.reload();
            $("#fdOrderDetail").hide();
        } else {
            var data = { "flow": e.value };
            $.ajax({
                type: "get",
                dataType: "html",
                url: "@Url.Content("~/ProductionOrder/_OrderDetailList/")",
                data: data,
                cache: false,
                success: function (data, textStatus) {
                    $("#fdOrderDetail").html(data);
                    $("#fdOrderDetail").show();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }

    function onQuickCreate() {
        ClearMessage();
        var grid = $("#OrderDetail").data("tGrid");
        var inserted = grid.changeLog.inserted;
        var updated = $.grep(grid.changeLog.updated, function (value) { return value != undefined });
        var deleted = $.grep(grid.changeLog.deleted, function (value) { return value != undefined });

        var oderDetails = grid.changeLog.serialize(inserted, updated, deleted);
        var ordermstr = {
            "Flow": $("#Flow").val(),
            "EffectiveDate": $("#EffectiveDate").val(),
            "ReferenceOrderNo": $("#ReferenceOrderNo").val(),
            "ExternalOrderNo": $("ExternalOrderNo").val()
        }

        grid._convert(oderDetails);
        $.ajax({
            type: "post",
            dataType: "json",
            url: "@Url.Content("~/ProductionOrder/QuickNew/")",
            data: $.extend(oderDetails, ordermstr),
            success: function (data, ordermstr) {
                DisplayJsonMessages(data);
                if (data != "") {
                    var orderData = {
                        "orderNo": data.Data.OrderNo
                    };
                    $.ajax({
                        type: "post",
                        dataType: "html",
                        url: "@Url.Content("~/ProductionOrder/Edit/")",
                        data: orderData,
                        cache: false,
                        success: function (data, textStatus) {
                            var $tGrid = $("#content");
                            $($tGrid).html(data);
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                DisplayTextMessages(XMLHttpRequest.responseText);
            }
        });
    }
</script>
@using (Html.BeginForm())
{
    <fieldset>
        <div class="editor">
            <div class="editor-label-2">
                <label>
                    @Resources.ORD.OrderMaster.OrderMaster_Flow_Production
                </label>
            </div>
            <div class="editor-field-2">
                @{
    Html.RenderAction("_FlowComboBox", "Common", new { controlName = "Flow", type = (int)com.Sconit.CodeMaster.OrderType.Production, isChange = true });
                }
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.EffectiveDate)
            </div>
            <div class="editor-field-2">
                <div class="editor-field-2">
                    @(Html.Telerik().DateTimePicker().Format("yyyy-MM-dd HH:mm")
                .Name("EffectiveDate")
                        )
                </div>
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ReferenceOrderNo)
            </div>
            <div class="editor-label-2">
                @Html.LabelFor(model => model.ExternalOrderNo)
            </div>
            <div class="editor-field-2">
                @Html.EditorFor(model => model.ExternalOrderNo)
            </div>
        </div>
        <div class="editor-footer">
            @Html.Button(Resources.Global.Button_New, "Url_OrderMstr_Production_QuickNew", new Dictionary<string, string>()
	{
	    {"type", "button"},
	    {"id", "btnNew"},
        {"needconfirm","true"},
        {"onclick","onQuickCreate()"}
	})
        </div>
    </fieldset>
   
    <div id="fdOrderDetail" style="display: none;">
        @{
    Html.RenderAction("_OrderDetailList", "ProductionOrder", new { flow = ViewBag.flow });
        }
    </div>
   
}
